openapi: 3.0.0
info:
  title: RuneRogue Game Server API
  version: 1.0.0
  description: API documentation for the RuneRogue TypeScript game server.
servers:
  - url: http://localhost:3001
    description: Development server
paths:
  /health:
    get:
      summary: Health Check
      description: Checks the health and status of the server and its integrated services (database, Redis, economy).
      responses:
        '200':
          description: Server is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-10-27T10:00:00Z"
                  environment:
                    type: string
                    example: development
                  version:
                    type: string
                    example: 0.1.0
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: connected
                      redis:
                        type: string
                        example: connected
                      economy:
                        type: string
                        example: healthy
        '503':
          description: Server is degraded or unhealthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: degraded
                  timestamp:
                    type: string
                    format: date-time
                    example: "2023-10-27T10:00:00Z"
                  message:
                    type: string
                    example: Error checking service health

  /health/detailed:
    get:
      summary: Detailed Health Check
      description: Provides a comprehensive health check with performance metrics and health scoring from the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Detailed health information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: integer
                  health_score:
                    type: object
                    properties:
                      overall:
                        type: number
                      components:
                        type: object
                      trend:
                        type: string
                      alerts:
                        type: array
                        items:
                          type: string
                  performance:
                    type: object
                    properties:
                      baseline_status:
                        type: string
                      current_response_time_p95:
                        type: number
                      current_error_rate:
                        type: number
                      regression_check:
                        type: object
                  self_building:
                    type: object
                    properties:
                      milestone:
                        type: string
                      enabled:
                        type: boolean
                      last_improvement:
                        type: string
                        nullable: true
                      health_monitoring:
                        type: string

  /config:
    get:
      summary: Get Configuration
      description: Returns the current Flask application configuration.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with configuration details.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

  /scrape:
    post:
      summary: Scrape URL
      description: Scrapes a URL using a multi-fallback pattern.
      tags:
        - Flask Legacy Backend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  example: https://www.runerogue.com
      responses:
        '200':
          description: Successful scraping response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  url:
                    type: string
                  content_length:
                    type: integer
                  dry_run:
                    type: boolean
        '400':
          description: Bad Request, URL is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error, scraping failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/discord:
    get:
      summary: Redirect to Discord OAuth2
      description: Redirects the user to the Discord OAuth2 authorization page to initiate the authentication flow.
      responses:
        '302':
          description: Redirects to Discord authorization URL.

  /auth/discord/callback:
    get:
      summary: Discord OAuth2 Callback
      description: Exchanges the authorization code for an access token and user information, then redirects to the frontend with a JWT.
      parameters:
        - in: query
          name: code
          schema:
            type: string
          description: The authorization code received from Discord.
          required: true
        - in: query
          name: error
          schema:
            type: string
          description: Error message from Discord, if authentication failed.
        - in: query
          name: error_description
          schema:
            type: string
          description: Detailed error description from Discord.
      responses:
        '302':
          description: Redirects to the frontend with a JWT token.
        '400':
          description: Bad request, e.g., no code provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No code provided
        '500':
          description: Internal server error, e.g., failed to get access token or user info.

  /auth/me:
    get:
      summary: Get Current User
      description: Retrieves the profile information of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123456789012345678"
                  username:
                    type: string
                    example: "TestUser"
                  avatar:
                    type: string
                    nullable: true
                    example: "abcdef1234567890"
                  discriminator:
                    type: string
                    example: "1234"
        '401':
          description: Unauthorized, if no token is provided or the token is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Not authenticated

  /metrics:
    get:
      summary: Prometheus Metrics
      description: Provides Prometheus-style metrics for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with Prometheus metrics.
          content:
            text/plain:
              schema:
                type: string
                example: '# HELP flask_http_request_duration_seconds Duration of HTTP requests in seconds.
# TYPE flask_http_request_duration_seconds histogram
flask_http_request_duration_seconds_bucket{le="0.1"} 0.0
'

  /performance/baseline:
    get:
      summary: Get Performance Baseline
      description: Retrieves the current performance baseline for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with performance baseline details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  baseline_established:
                    type: boolean
                  p95_latency:
                    type: number
                    nullable: true
                  error_rate:
                    type: number
                    nullable: true
                  timestamp:
                    type: integer
                    nullable: true
    post:
      summary: Set Performance Baseline
      description: Sets or updates the performance baseline for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                p95_latency:
                  type: number
                  description: Optional. The P95 latency to set as baseline.
                error_rate:
                  type: number
                  description: Optional. The error rate to set as baseline.
      responses:
        '200':
          description: Baseline updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Performance baseline updated.
                  new_baseline:
                    type: object
                    properties:
                      p95_latency:
                        type: number
                      error_rate:
                        type: number
                      timestamp:
                        type: integer
        '400':
          description: Bad Request, if invalid parameters are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /improvements:
    get:
      summary: Get Improvement Suggestions
      description: Retrieves a list of current improvement suggestions for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with improvement suggestions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        description:
                          type: string
                        status:
                          type: string
                        timestamp:
                          type: integer
                  total_count:
                    type: integer
                  status_counts:
                    type: object
                    additionalProperties:
                      type: integer
                  last_updated:
                    type: integer

  /improvements/history:
    get:
      summary: Get Improvement History
      description: Retrieves the history of all logged improvement suggestions for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with improvement history.
          content:
            application/json:
              schema:
                type: object
                properties:
                  improvements_log:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        description:
                          type: string
                        status:
                          type: string
                        timestamp:
                          type: integer
                  total_count:
                    type: integer
                  status_counts:
                    type: object
                    additionalProperties:
                      type: integer
                  last_updated:
                    type: integer

  /health/trends:
    get:
      summary: Get Health Trends
      description: Retrieves health trends over time for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      parameters:
        - in: query
          name: hours
          schema:
            type: integer
            default: 24
          description: Number of hours to retrieve health trends for (max 168).
      responses:
        '200':
          description: Successful response with health trends.
          content:
            application/json:
              schema:
                type: object
                properties:
                  trends:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: integer
                        score:
                          type: number
                  milestone:
                    type: string
                  last_updated:
                    type: integer

  /health/score:
    get:
      summary: Get Current Health Score
      description: Retrieves the current overall health score and component scores for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with current health score.
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: number
                  status:
                    type: string
                  trend:
                    type: string
                  components:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        score:
                          type: number
                        status:
                          type: string
                        message:
                          type: string
                  alerts:
                    type: array
                    items:
                      type: string
                  last_updated:
                    type: integer
                  milestone:
                    type: string

  /monitoring/alerts:
    get:
      summary: Get Monitoring Alerts
      description: Retrieves current monitoring alerts, including health-based and performance regression alerts for the Flask Legacy Backend.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with monitoring alerts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        severity:
                          type: string
                        message:
                          type: string
                        timestamp:
                          type: integer
                        component:
                          type: string
                        details:
                          type: object
                  total_count:
                    type: integer
                  critical_count:
                    type: integer
                  warning_count:
                    type: integer
                  last_updated:
                    type: integer
                  milestone:
                    type: string

  /items:
    get:
      summary: Get a list of items
      description: Retrieves a list of items available in the economy system.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: Number of records to skip for pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Maximum number of records to return.
        - in: query
          name: is_tradeable
          schema:
            type: boolean
          description: Filter by tradeable status.
        - in: query
          name: name_contains
          schema:
            type: string
          description: Filter by item name containing a specific string.
      responses:
        '200':
          description: A list of items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized.

  /items/{item_id}:
    get:
      summary: Get an item by ID
      description: Retrieves a single item by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: item_id
          schema:
            type: integer
          required: true
          description: The ID of the item to retrieve.
      responses:
        '200':
          description: Item details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found.
        '401':
          description: Unauthorized.

  /trades:
    get:
      summary: Get a list of trades
      description: Retrieves a list of trades filtered by status or player ID.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: ["pending", "accepted", "declined", "cancelled"]
          description: Filter trades by their status.
        - in: query
          name: player_id
          schema:
            type: integer
          description: Filter trades by initiator or receiver player ID.
      responses:
        '200':
          description: A list of trades.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
        '401':
          description: Unauthorized.

  /token:
    post:
      summary: Obtain Access Token
      description: Authenticates a user and returns an access token.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Access token obtained successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
        '400':
          description: Invalid credentials.

  /tools:
    get:
      summary: List Available Tools
      description: Retrieves a list of all tools registered with the MCP server.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of available tools.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'

  /tools/{tool_name}/execute:
    post:
      summary: Execute Tool Synchronously
      description: Executes a specified tool synchronously and returns its output.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tool_name
          schema:
            type: string
          required: true
          description: The name of the tool to execute.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                args:
                  type: object
                  description: Arguments for the tool in JSON format.
              required:
                - args
      responses:
        '200':
          description: Tool executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output:
                    type: string
                    description: The output from the tool execution.
        '400':
          description: Invalid tool name or arguments.
        '401':
          description: Unauthorized.
        '404':
          description: Tool not found.

  /grand_exchange/offers:
    get:
      summary: Get all Grand Exchange offers
      description: Retrieves a list of all Grand Exchange offers.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: Number of records to skip for pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Maximum number of records to return.
      responses:
        '200':
          description: A list of Grand Exchange offers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GrandExchangeOfferResponse'
        '401':
          description: Unauthorized.
    post:
      summary: Create a new Grand Exchange offer
      description: Creates a new Grand Exchange offer.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrandExchangeOfferCreate'
      responses:
        '200':
          description: The newly created Grand Exchange offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrandExchangeOfferResponse'
        '400':
          description: Invalid offer request.
        '401':
          description: Unauthorized.
        '404':
          description: Player or Item not found.

  /grand_exchange/offers/{offer_id}:
    get:
      summary: Get a Grand Exchange offer by ID
      description: Retrieves a single Grand Exchange offer by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offer_id
          schema:
            type: integer
          required: true
          description: The ID of the Grand Exchange offer to retrieve.
      responses:
        '200':
          description: Grand Exchange offer details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrandExchangeOfferResponse'
        '404':
          description: Offer not found.
        '401':
          description: Unauthorized.
    put:
      summary: Update a Grand Exchange offer
      description: Updates the status of an existing Grand Exchange offer.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: offer_id
          schema:
            type: integer
          required: true
          description: The ID of the Grand Exchange offer to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrandExchangeOfferUpdate'
      responses:
        '200':
          description: The updated Grand Exchange offer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrandExchangeOfferResponse'
        '400':
          description: Invalid offer update request.
        '401':
          description: Unauthorized.
        '404':
          description: Offer not found.

  /grand_exchange/history:
    get:
      summary: Get Grand Exchange history
      description: Retrieves the historical data of Grand Exchange transactions.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: Number of records to skip for pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Maximum number of records to return.
      responses:
        '200':
          description: A list of Grand Exchange historical transactions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GrandExchangeHistoryResponse'
        '401':
          description: Unauthorized.

  /grand_exchange/history/{item_id}:
    get:
      summary: Get Grand Exchange history for an item
      description: Retrieves the historical data of Grand Exchange transactions for a specific item.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: item_id
          schema:
            type: integer
          required: true
          description: The ID of the item to retrieve history for.
      responses:
        '200':
          description: A list of Grand Exchange historical transactions for the item.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GrandExchangeHistoryResponse'
        '404':
          description: Item not found.
        '401':
          description: Unauthorized.

  /metrics:
    get:
      summary: Get API metrics
      description: Retrieves various API usage metrics.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: API metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_requests:
                    type: integer
                    example: 1000
                  average_response_time_ms:
                    type: number
                    format: float
                    example: 50.5
                  error_rate:
                    type: number
                    format: float
                    example: 0.01
        '401':
          description: Unauthorized.

  /config:
    get:
      summary: Get configuration settings
      description: Retrieves various configuration settings for the economy system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Configuration settings.
          content:
            application/json:
              schema:
                type: object
                properties:
                  max_players:
                    type: integer
                    example: 10000
                  trade_fee_percent:
                    type: number
                    format: float
                    example: 0.05
        '401':
          description: Unauthorized.

  /health_check:
    get:
      summary: Perform a health check
      description: Checks the operational status of the economy API.
      responses:
        '200':
          description: API is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
        '500':
          description: API is unhealthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "unhealthy"
                  error:
                    type: string
                    example: "Database connection failed"

  /performance_baseline:
    get:
      summary: Get performance baseline data
      description: Retrieves baseline performance metrics for the economy system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Performance baseline data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  avg_latency_ms:
                    type: number
                    format: float
                    example: 25.5
                  max_tps:
                    type: integer
                    example: 500
        '401':
          description: Unauthorized.

  /suggestions:
    get:
      summary: Get improvement suggestions
      description: Retrieves suggestions for improving game economy or player experience.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of improvement suggestions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Adjust item drop rates"
        '401':
          description: Unauthorized.

  /health_trends:
    get:
      summary: Get health trends
      description: Retrieves historical health trends and scores for the economy system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Health trends data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                    format: float
                    example: 85.5
                  trend:
                    type: string
                    example: "stable"
        '401':
          description: Unauthorized.

  /monitoring_alerts:
    get:
      summary: Get monitoring alerts
      description: Retrieves active monitoring alerts for the economy system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of monitoring alerts.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "High latency detected in trade API"
        '401':
          description: Unauthorized.

  /history:
    get:
      summary: Get historical data
      description: Retrieves general historical data for the economy system.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Historical data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Historical data for the economy system"



  /players:
    get:
      summary: Get All Players
      description: Retrieve a list of all players in the economy system.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: Number of items to skip.
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Maximum number of items to return.
      responses:
        '200':
          description: A list of players.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a New Player
      description: Create a new player in the economy system.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreate'
      responses:
        '200':
          description: The newly created player.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /players/{player_id}:
    get:
      summary: Get Player by ID
      description: Retrieve a single player by their ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: player_id
          schema:
            type: integer
          required: true
          description: The ID of the player to retrieve.
      responses:
        '200':
          description: The player object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerResponse'
        '404':
          description: Player not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Player not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'


        - in: query
          name: is_tradeable
          schema:
            type: boolean
          description: Filter by tradeable status.
        - in: query
          name: name_contains
          schema:
            type: string
          description: Filter by item name containing a substring.
      responses:
        '200':
          description: A list of items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a New Item
      description: Create a new item in the economy system.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreate'
      responses:
        '200':
          description: The newly created item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /items/{item_id}:
    get:
      summary: Get Item by ID
      description: Retrieve a single item by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: item_id
          schema:
            type: integer
          required: true
          description: The ID of the item to retrieve.
      responses:
        '200':
          description: The item object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '404':
          description: Item not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Item not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /players/{player_id}/inventory:
    get:
      summary: Get Player Inventory
      description: Retrieve the inventory of a specific player.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: player_id
          schema:
            type: integer
          required: true
          description: The ID of the player whose inventory to retrieve.
      responses:
        '200':
          description: A list of inventory items for the player.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItemResponse'
        '404':
          description: Player not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Player not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Add Item to Player Inventory
      description: Add a new item to a player's inventory.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: player_id
          schema:
            type: integer
          required: true
          description: The ID of the player to add the item to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemCreate'
      responses:
        '200':
          description: The newly added inventory item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItemResponse'
        '400':
          description: Invalid request, e.g., player ID mismatch or non-stackable item already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Player ID in path must match player ID in request body
        '404':
          description: Player or Item not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Player not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /trades:
    get:
      summary: Get All Trades
      description: Retrieve a list of all trades in the economy system, with optional filtering.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, accepted, rejected, completed, cancelled]
          description: Filter trades by their status.
        - in: query
          name: player_id
          schema:
            type: integer
          description: Filter trades involving a specific player ID.
      responses:
        '200':
          description: A list of trades.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object # Simplified for now, can create a TradeResponse schema later
                  properties:
                    id:
                      type: integer
                    initiator_id:
                      type: integer
                    receiver_id:
                      type: integer
                    status:
                      type: string
                    initiated_at:
                      type: string
                      format: date-time
                    completed_at:
                      type: string
                      format: date-time
                      nullable: true
                    items:
                      type: array
                      items:
                        type: object
                        properties:
                          item_id:
                            type: integer
                          quantity:
                            type: integer
                          from_player_id:
                            type: integer
                          to_player_id:
                            type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /:
    get:
      summary: Home Endpoint
      description: Returns basic information about the RuneRogue API.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with API information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: RuneRogue API
                  version:
                    type: string
                    example: 1.0.0
                  self_building:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      milestone:
                        type: string
                      status:
                        type: string
                  config:
                    type: object
                    properties:
                      debug:
                        type: boolean
                      dry_run:
                        type: boolean
                      log_level:
                        type: string
  /game:
    get:
      summary: Game Page
      description: Serves the Phaser game's index.html.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successfully served the game's index.html.
  /config:
    get:
      summary: Get Configuration
      description: Returns the current Flask application configuration.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful response with configuration details.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /scrape:
    post:
      summary: Scrape URL
      description: Scrapes a URL using a multi-fallback pattern.
      tags:
        - Flask Legacy Backend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  example: https://www.runerogue.com
      responses:
        '200':
          description: Successful scraping response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  url:
                    type: string
                  content_length:
                    type: integer
                  dry_run:
                    type: boolean
        '400':
          description: Bad Request, URL is missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error, scraping failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /health:
    get:
      summary: Basic Health Check
      description: Returns the health status of the Flask application.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Successful health check.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: integer
                    format: int64
  /health/detailed:
    get:
      summary: Detailed Health Check
      description: Provides a comprehensive health check with performance metrics and health scoring.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Detailed health information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: integer
                  health_score:
                    type: object
                    properties:
                      overall:
                        type: number
                      components:
                        type: object
                      trend:
                        type: string
                      alerts:
                        type: array
                        items:
                          type: string
                  performance:
                    type: object
                  self_building:
                    type: object
  /metrics:
    get:
      summary: Prometheus Metrics
      description: Returns Prometheus-style metrics for the Flask application.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Prometheus metrics in plain text format.
          content:
            text/plain:
              schema:
                type: string
  /performance/baseline:
    get:
      summary: Get Performance Baseline
      description: Retrieves the current performance baseline.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Current performance baseline.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  baseline:
                    type: object
        '404':
          description: No baseline established.
    post:
      summary: Establish Performance Baseline
      description: Establishes a new performance baseline.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: New performance baseline established.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  baseline:
                    type: object
  /improvements/suggestions:
    get:
      summary: Get Improvement Suggestions
      description: Retrieves current improvement suggestions based on system health and performance.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: List of improvement suggestions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /improvements/history:
    get:
      summary: Get Improvement History
      description: Retrieves the history of all logged improvement suggestions.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: History of improvement suggestions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  improvements_log:
                    type: array
                    items:
                      type: object
                  total_count:
                    type: integer
                  status_counts:
                    type: object
                  last_updated:
                    type: integer
  /health/trends:
    get:
      summary: Get Health Trends
      description: Retrieves health trends over time.
      tags:
        - Flask Legacy Backend
      parameters:
        - in: query
          name: hours
          schema:
            type: integer
            default: 24
          description: Number of hours to retrieve health trends for (max 168).
      responses:
        '200':
          description: Health trends data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  trends:
                    type: array
                    items:
                      type: object
                  milestone:
                    type: string
                  last_updated:
                    type: integer
  /health/score:
    get:
      summary: Get Current Health Score
      description: Retrieves the current overall health score and component-wise scores.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: Current health score details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: number
                  status:
                    type: string
                  trend:
                    type: string
                  components:
                    type: object
                  alerts:
                    type: array
                    items:
                      type: string
                  last_updated:
                    type: integer
                  milestone:
                    type: string
  /monitoring/alerts:
    get:
      summary: Get Monitoring Alerts
      description: Retrieves current monitoring alerts, including health-based and performance regression alerts.
      tags:
        - Flask Legacy Backend
      responses:
        '200':
          description: List of current alerts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      type: object
                  total_count:
                    type: integer
                  critical_count:
                    type: integer
                  warning_count:
                    type: integer
                  last_updated:
                    type: integer
                  milestone:
                    type: string


components:
  schemas:
    PlayerCreate:
      type: object
      properties:
        username:
          type: string
          example: "newplayer"
        email:
          type: string
          format: email
          example: "newplayer@example.com"
        is_active:
          type: boolean
          default: true
      required:
        - username
        - email
    PlayerResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "testuser"
        email:
          type: string
          format: email
          example: "test@example.com"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00Z"
        last_login:
          type: string
          format: date-time
          nullable: true
          example: "2023-10-27T10:00:00Z"
      required:
        - id
        - username
        - email
        - is_active
        - created_at
    ItemCreate:
      type: object
      properties:
        name:
          type: string
          example: "New Item"
        description:
          type: string
          nullable: true
          example: "A newly created item."
        is_tradeable:
          type: boolean
          default: true
        is_stackable:
          type: boolean
          default: false
        base_value:
          type: number
          format: float
          default: 0
      required:
        - name
    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          example: 101
        name:
          type: string
          example: "Wooden Sword"
        description:
          type: string
          nullable: true
          example: "A basic wooden sword."
        is_tradeable:
          type: boolean
          example: true
        is_stackable:
          type: boolean
          example: false
        base_value:
          type: number
          format: float
          example: 0
        created_at:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00Z"
      required:
        - id
        - name
        - is_tradeable
        - is_stackable
        - base_value
        - created_at
    InventoryItemBase:
      type: object
      properties:
        player_id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 101
        quantity:
          type: integer
          default: 1
          example: 5
      required:
        - player_id
        - item_id
    InventoryItemCreate:
      type: object
      properties:
        player_id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 101
        quantity:
          type: integer
          default: 1
          example: 5
      required:
        - player_id
        - item_id
    InventoryItemResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        player_id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 101
        quantity:
          type: integer
          example: 5
        acquired_at:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00Z"
      required:
        - id
        - player_id
        - item_id
        - quantity
        - acquired_at
    Player:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "testuser"
        email:
          type: string
          format: email
          example: "test@example.com"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00Z"
        last_login:
          type: string
          format: date-time
          nullable: true
          example: "2023-10-27T10:00:00Z"
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 101
        name:
          type: string
          example: "Wooden Sword"
        description:
          type: string
          nullable: true
          example: "A basic wooden sword."
        is_tradeable:
          type: boolean
          example: true
        is_stackable:
          type: boolean
          example: false
        base_value:
          type: number
          format: float
          example: 0
    Error:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
          example: "An unexpected error occurred."
        code:
          type: string
          description: An optional error code for programmatic handling.
          example: "ERR_INTERNAL_SERVER"
    InventoryItem:
      type: object
      properties:
        id:
          type: integer
          example: 1001
        player_id:
          type: integer
          example: 1
        item_id:
          type: integer
          example: 101
        quantity:
          type: integer
          example: 5
        acquired_at:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00Z"
    Trade:
      type: object
      properties:
        id:
          type: integer
          example: 2001
        initiator_id:
          type: integer
          example: 1
        receiver_id:
          type: integer
          example: 2
        status:
          type: string
          enum: ["pending", "accepted", "declined", "cancelled"]
          example: "pending"
        initiated_at:
          type: string
          format: date-time
          example: "2023-10-27T10:00:00Z"
        completed_at:
          type: string
          format: date-time
          nullable: true
          example: "2023-10-27T10:05:00Z"
        cancelled_at:
          type: string
          format: date-time
          nullable: true
          example: "2023-10-27T10:10:00Z"
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: integer
                example: 101
              quantity:
                type: integer
                example: 1
              from_player_id:
                type: integer
                example: 1
              to_player_id:
                type: integer
                example: 2
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Invalid authentication credentials


        - in: path
          name: tool_name
          schema:
            type: string
          required: true
          description: The name of the tool to execute.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolExecutionRequest'
      responses:
        '200':
          description: Tool executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolExecutionResponse'
        '404':
          description: Tool not found.
        '500':
          description: Tool execution failed.

  /tools/{tool_name}/execute_async:
    post:
      summary: Execute Tool Asynchronously
      description: Executes a specified tool asynchronously and returns a task ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tool_name
          schema:
            type: string
          required: true
          description: The name of the tool to execute asynchronously.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolExecutionRequest'
      responses:
        '200':
          description: Asynchronous task started successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_id:
                    type: string
        '404':
          description: Tool not found.

  /tasks/{task_id}/status:
    get:
      summary: Get Asynchronous Task Status
      description: Retrieves the current status and result of an asynchronous task.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: task_id
          schema:
            type: string
          required: true
          description: The ID of the asynchronous task.
      responses:
        '200':
          description: Task status and result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusResponse'
        '404':
          description: Task not found.

  /security/config:
    put:
      summary: Update Security Configuration
      description: Updates the security configuration of the MCP server.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityConfigUpdate'
      responses:
        '200':
          description: Security configuration updated successfully.
        '403':
          description: Forbidden - Requires admin privileges.

components:
  schemas:
    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
    Tool:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parameters:
          type: object
    ToolExecutionRequest:
      type: object
      properties:
        input_data:
          type: object
          additionalProperties: true
    ToolExecutionResponse:
      type: object
      properties:
        output:
          type: object
          additionalProperties: true
    TaskStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["pending", "running", "completed", "failed"]
        result:
          type: object
          additionalProperties: true
          nullable: true
        error:
          type: string
          nullable: true
    SecurityConfigUpdate:
      type: object
      properties:
        rate_limit_enabled:
          type: boolean
          nullable: true
        allowed_ips:
          type: array
          items:
            type: string
          nullable: true

  /:
    get:
      summary: Home endpoint
      description: Provides basic information about the RuneRogue API.
      responses:
        '200':
          description: API status and configuration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "RuneRogue API"
                  version:
                    type: string
                    example: "1.0.0"
                  self_building:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                      milestone:
                        type: string
                      status:
                        type: string
                  config:
                    type: object
                    properties:
                      debug:
                        type: boolean
                      dry_run:
                        type: boolean
                      log_level:
                        type: string

  /game:
    get:
      summary: Game page
      description: Serves the Phaser game's index.html.
      responses:
        '200':
          description: Successfully served game page.
          content:
            text/html:
              schema:
                type: string

  /config:
    get:
      summary: Get current configuration
      description: Retrieves the current configuration settings of the Flask application.
      responses:
        '200':
          description: Current configuration settings.
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true

  /scrape:
    post:
      summary: Scrape URL
      description: Scrapes content from a given URL using a multi-fallback pattern.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: url
                  description: The URL to be scraped.
              required:
                - url
      responses:
        '200':
          description: Successfully scraped URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  url:
                    type: string
                  content_length:
                    type: integer
                  dry_run:
                    type: boolean
        '400':
          description: Bad Request - URL is required.
        '500':
          description: Internal Server Error - Scraping failed.

  /health:
    get:
      summary: Basic health check
      description: Provides a basic health status of the Flask application.
      responses:
        '200':
          description: Application is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: integer
                    example: 1678886400

  /health/detailed:
    get:
      summary: Detailed health check
      description: Provides comprehensive health status with performance metrics and health scoring.
      responses:
        '200':
          description: Detailed health information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: number
                  status:
                    type: string
                  components:
                    type: object
                  alerts:
                    type: array
                    items:
                      type: string

  /metrics:
    get:
      summary: Prometheus-style metrics
      description: Provides performance metrics in Prometheus format.
      responses:
        '200':
          description: Metrics data.
          content:
            text/plain:
              schema:
                type: string

  /performance/baseline:
    get:
      summary: Performance baseline
      description: Manages and retrieves performance baseline information.
      responses:
        '200':
          description: Performance baseline data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  baseline_established:
                    type: boolean
                  last_updated:
                    type: integer
                  metrics:
                    type: object

  /improvements:
    get:
      summary: Improvement suggestions
      description: Retrieves current improvement suggestions based on code analysis.
      responses:
        '200':
          description: List of improvement suggestions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    suggestion:
                      type: string
                    file:
                      type: string
                    line:
                      type: integer
                    status:
                      type: string

  /improvements/history:
    get:
      summary: Improvement history
      description: Retrieves the history of all logged improvement suggestions.
      responses:
        '200':
          description: History of improvement suggestions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  improvements_log:
                    type: array
                    items:
                      type: object
                  total_count:
                    type: integer
                  status_counts:
                    type: object
                  last_updated:
                    type: integer

  /health/trends:
    get:
      summary: Health trends
      description: Retrieves health trends over time.
      parameters:
        - in: query
          name: hours
          schema:
            type: integer
            default: 24
          description: Number of hours to retrieve health trends for.
      responses:
        '200':
          description: Health trends data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  trends:
                    type: array
                    items:
                      type: object
                  milestone:
                    type: string
                  last_updated:
                    type: integer

  /health/score:
    get:
      summary: Current health score
      description: Retrieves the current overall health score of the application.
      responses:
        '200':
          description: Current health score data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: number
                  status:
                    type: string
                  trend:
                    type: string
                  components:
                    type: object
                  alerts:
                    type: array
                    items:
                      type: string
                  last_updated:
                    type: integer
                  milestone:
                    type: string

  /monitoring/alerts:
    get:
      summary: Monitoring alerts
      description: Retrieves current monitoring alerts.
      responses:
        '200':
          description: List of monitoring alerts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      type: object
                  total_count:
                    type: integer
                  critical_count:
                    type: integer
                  warning_count:
                    type: integer
                  last_updated:
                    type: integer
                  milestone:
                    type: string
