/**
 * Fixed Entity Schemas for RuneRogue
 * This file contains all Colyseus schema definitions with proper registration handling
 */

import 'reflect-metadata';
import { ArraySchema, MapSchema, Schema, type } from '@colyseus/schema';

// Polyfill Symbol.metadata if needed
if (!Symbol.metadata) {
  (Symbol as any).metadata = Symbol('Symbol.metadata');
}

/**
 * Skill schema for individual skills (Attack, Strength, etc.)
 */
export class Skill extends Schema {
  @type('number')
  public level: number = 1;

  @type('number')
  public xp: number = 0;

  constructor(level: number = 1, xp: number = 0) {
    super();
    this.level = level;
    this.xp = xp;
  }
}

/**
 * Skills collection containing all player skills
 */
export class Skills extends Schema {
  @type(Skill)
  public attack: Skill = new Skill();

  @type(Skill)
  public strength: Skill = new Skill();

  @type(Skill)
  public defence: Skill = new Skill();

  @type(Skill)
  public mining: Skill = new Skill();

  @type(Skill)
  public woodcutting: Skill = new Skill();

  @type(Skill)
  public fishing: Skill = new Skill();

  @type(Skill)
  public prayer: Skill = new Skill();

  constructor() {
    super();
    this.attack = new Skill();
    this.strength = new Skill();
    this.defence = new Skill();
    this.mining = new Skill();
    this.woodcutting = new Skill();
    this.fishing = new Skill();
    this.prayer = new Skill();
  }
}

/**
 * Individual inventory item
 */
export class InventoryItem extends Schema {
  @type('string')
  public itemId: string = '';

  @type('number')
  public quantity: number = 1;

  @type('string')
  public name: string = '';

  @type('string')
  public description: string = '';

  @type('number')
  public attack: number = 0;

  @type('number')
  public defense: number = 0;

  @type('boolean')
  public isStackable: boolean = false;

  constructor() {
    super();
  }
}

/**
 * Player inventory containing items
 */
export class Inventory extends Schema {
  @type([InventoryItem])
  public items: ArraySchema<InventoryItem> = new ArraySchema<InventoryItem>();

  @type('number')
  public maxSize: number = 28;

  constructor() {
    super();
    this.items = new ArraySchema<InventoryItem>();
  }
}

/**
 * Player equipment slots
 */
export class Equipment extends Schema {
  @type(InventoryItem)
  public weapon?: InventoryItem;

  @type(InventoryItem)
  public armor?: InventoryItem;

  @type(InventoryItem)
  public shield?: InventoryItem;

  constructor() {
    super();
  }
}

/**
 * Player schema
 */
export class Player extends Schema {
  @type('string')
  public id: string = '';

  @type('string')
  public name: string = '';

  @type('number')
  public x: number = 0;

  @type('number')
  public y: number = 0;

  @type('number')
  public health: number = 100;

  @type('number')
  public maxHealth: number = 100;

  @type('number')
  public combatLevel: number = 3;

  @type(Skills)
  public skills: Skills = new Skills();

  @type(Inventory)
  public inventory: Inventory = new Inventory();

  @type(Equipment)
  public equipment: Equipment = new Equipment();

  constructor() {
    super();
    this.skills = new Skills();
    this.inventory = new Inventory();
    this.equipment = new Equipment();
  }
}

/**
 * Mob/NPC schema
 */
export class Mob extends Schema {
  @type('string')
  public id: string = '';

  @type('string')
  public name: string = '';

  @type('number')
  public x: number = 0;

  @type('number')
  public y: number = 0;

  @type('number')
  public health: number = 100;

  @type('number')
  public maxHealth: number = 100;

  @type('number')
  public level: number = 1;

  @type('boolean')
  public isAlive: boolean = true;

  constructor() {
    super();
  }
}

/**
 * Loot item on the ground
 */
export class LootItem extends Schema {
  @type('string')
  public id: string = '';

  @type('string')
  public itemId: string = '';

  @type('string')
  public name: string = '';

  @type('number')
  public quantity: number = 1;

  @type('number')
  public x: number = 0;

  @type('number')
  public y: number = 0;

  @type('number')
  public spawnTime: number = 0;

  constructor() {
    super();
  }
}

/**
 * Main game state schema
 */
export class GameState extends Schema {
  @type({ map: Player })
  public players: MapSchema<Player> = new MapSchema<Player>();

  @type({ map: Mob })
  public npcs: MapSchema<Mob> = new MapSchema<Mob>();

  @type({ map: LootItem })
  public loot: MapSchema<LootItem> = new MapSchema<LootItem>();

  @type('number')
  public timestamp: number = 0;

  constructor() {
    super();
    this.players = new MapSchema<Player>();
    this.npcs = new MapSchema<Mob>();
    this.loot = new MapSchema<LootItem>();
  }
}

// Export message interfaces for type safety
export interface PlayerActionMessage {
  type: string;
  targetId?: string;
  abilityId?: string;
}

export interface EquipItemMessage {
  itemIndex: number;
  slot: 'weapon' | 'armor' | 'shield';
}

export interface DropItemMessage {
  itemIndex: number;
  quantity?: number;
}

export interface CollectLootMessage {
  lootId: string;
}

export interface LootDropMessage {
  itemType: string;
  quantity: number;
  position: { x: number; y: number };
}

export interface TradeRequestMessage {
  targetPlayerId: string;
}

export interface TradeOfferMessage {
  offeredItems: { itemId: string; quantity: number }[];
}

export interface TradeAcceptMessage {
  tradeId: string;
}

export interface TradeCancelMessage {
  tradeId: string;
}
