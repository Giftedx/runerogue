/**
 * Simple Schemas for RuneRogue Using Colyseus defineTypes API
 *
 * This module provides Colyseus schemas using the defineTypes static method
 * to avoid decorator execution issues during Jest test runs.
 */

import { Schema, ArraySchema, MapSchema, defineTypes } from '@colyseus/schema';

/**
 * Skill Schema using defineTypes
 */
export class Skill extends Schema {
  public level: number = 1;
  public xp: number = 0;

  constructor(level: number = 1, xp: number = 0) {
    super();
    this.level = level;
    this.xp = xp;
  }
}

defineTypes(Skill, {
  level: 'number',
  xp: 'number',
});

/**
 * InventoryItem Schema using defineTypes
 */
export class InventoryItem extends Schema {
  public itemId: string = '';
  public quantity: number = 1;
  public name: string = '';
  public attack: number = 0;
  public strength: number = 0;
  public defence: number = 0;
  public ranged: number = 0;
  public magic: number = 0;
  public prayer: number = 0;
  public value: number = 0;
  public stackable: boolean = false;
  public tradeable: boolean = true;
  public description: string = '';

  constructor(itemId: string = '', quantity: number = 1) {
    super();
    this.itemId = itemId;
    this.quantity = quantity;
  }
}

defineTypes(InventoryItem, {
  itemId: 'string',
  quantity: 'number',
  name: 'string',
  attack: 'number',
  strength: 'number',
  defence: 'number',
  ranged: 'number',
  magic: 'number',
  prayer: 'number',
  value: 'number',
  stackable: 'boolean',
  tradeable: 'boolean',
  description: 'string',
});

/**
 * Inventory Schema using defineTypes
 */
export class Inventory extends Schema {
  public items = new ArraySchema<InventoryItem>();
  public maxSlots: number = 28;

  constructor() {
    super();
  }

  addItem(item: InventoryItem): boolean {
    if (this.items.length >= this.maxSlots) {
      return false;
    }
    this.items.push(item);
    return true;
  }

  removeItem(index: number): InventoryItem | null {
    if (index < 0 || index >= this.items.length) {
      return null;
    }
    const item = this.items[index];
    this.items.splice(index, 1);
    return item;
  }

  findItem(itemId: string): InventoryItem | null {
    return this.items.find(item => item.itemId === itemId) || null;
  }
}

defineTypes(Inventory, {
  items: [InventoryItem],
  maxSlots: 'number',
});

/**
 * Skills Collection Schema using defineTypes
 */
export class Skills extends Schema {
  public attackSkill: Skill;
  public strength: Skill;
  public defence: Skill;
  public mining: Skill;
  public woodcutting: Skill;
  public fishing: Skill;
  public prayer: Skill;

  constructor() {
    super();
    this.attackSkill = new Skill();
    this.strength = new Skill();
    this.defence = new Skill();
    this.mining = new Skill();
    this.woodcutting = new Skill();
    this.fishing = new Skill();
    this.prayer = new Skill();
  }
}

defineTypes(Skills, {
  attackSkill: Skill,
  strength: Skill,
  defence: Skill,
  mining: Skill,
  woodcutting: Skill,
  fishing: Skill,
  prayer: Skill,
});

/**
 * Player Schema using defineTypes
 */
export class Player extends Schema {
  public id: string = '';
  public username: string = '';
  public x: number = 0;
  public y: number = 0;
  public z: number = 0;
  public health: number = 100;
  public maxHealth: number = 100;
  public combatLevel: number = 3;
  public skills: Skills;
  public inventory: Inventory;
  public isOnline: boolean = true;
  public lastSeen: number = 0;

  constructor(id: string = '', username: string = '') {
    super();
    this.id = id;
    this.username = username;
    this.skills = new Skills();
    this.inventory = new Inventory();
    this.lastSeen = Date.now();
  }
}

defineTypes(Player, {
  id: 'string',
  username: 'string',
  x: 'number',
  y: 'number',
  z: 'number',
  health: 'number',
  maxHealth: 'number',
  combatLevel: 'number',
  skills: Skills,
  inventory: Inventory,
  isOnline: 'boolean',
  lastSeen: 'number',
});

/**
 * GameState Schema using defineTypes
 */
export class GameState extends Schema {
  public players = new MapSchema<Player>();
  public npcs = new MapSchema<string>();
  public loot = new MapSchema<string>();
  public timestamp: number = 0;
  public tickRate: number = 60;

  constructor() {
    super();
    this.timestamp = Date.now();
  }

  addPlayer(player: Player): void {
    this.players.set(player.id, player);
  }

  removePlayer(playerId: string): void {
    this.players.delete(playerId);
  }

  getPlayer(playerId: string): Player | undefined {
    return this.players.get(playerId);
  }

  updateTimestamp(): void {
    this.timestamp = Date.now();
  }
}

defineTypes(GameState, {
  players: { map: Player },
  npcs: { map: 'string' },
  loot: { map: 'string' },
  timestamp: 'number',
  tickRate: 'number',
});

/**
 * Schema Factory Functions
 */
export const SchemaFactories = {
  createSkill: (level: number = 1, xp: number = 0) => new Skill(level, xp),
  createSkills: () => new Skills(),
  createInventoryItem: (itemId: string = '', quantity: number = 1) =>
    new InventoryItem(itemId, quantity),
  createInventory: () => new Inventory(),
  createPlayer: (id: string = '', username: string = '') => new Player(id, username),
  createGameState: () => new GameState(),
};

// Export types and interfaces
export interface PlayerActionMessage {
  type: string;
  targetId?: string;
  abilityId?: string;
}

export interface EquipItemMessage {
  itemIndex: number;
  slot: 'weapon' | 'armor' | 'shield';
}

export interface DropItemMessage {
  itemIndex: number;
  quantity?: number;
}

export interface CollectLootMessage {
  lootId: string;
}

export interface LootDropMessage {
  itemType: string;
  quantity: number;
  position: { x: number; y: number };
}

export interface TradeRequestMessage {
  targetPlayerId: string;
}

export interface TradeOfferMessage {
  offeredItems: { itemId: string; quantity: number }[];
}

export interface TradeAcceptMessage {
  tradeId: string;
}

export interface TradeCancelMessage {
  tradeId: string;
}
