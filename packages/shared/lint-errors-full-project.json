[{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\__mocks__\\p-limit.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'concurrency' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"concurrency"},"fix":{"range":[151,162],"text":""},"desc":"Remove unused variable 'concurrency'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mock for p-limit module to resolve Jest ESM compatibility issues\n * This provides a CommonJS-compatible version for testing\n */\nconst pLimit = (concurrency) => {\n  return (fn, ...args) => {\n    return Promise.resolve(fn(...args));\n  };\n};\n\npLimit.default = pLimit;\n\nmodule.exports = pLimit;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\__tests__\\basic.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":6,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":10,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":11,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Basic test file for shared package\n * @description Ensures the package can be tested and imported properly\n */\ndescribe(\"Shared Package\", () => {\n  it(\"should be able to import the main module\", async () => {\n    const shared = await import(\"../index\");\n    expect(shared).toBeDefined();\n  });\n  it(\"should pass basic test to verify Jest is working\", () => {\n    expect(true).toBe(true);\n  });\n});\nexport {};\n//# sourceMappingURL=basic.test.js.map\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\__tests__\\basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\constants\\game.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\constants\\game.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\result.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\schemas\\GameRoomState.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":17,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":17,"endColumn":33,"fix":{"range":[423,431],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":18,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":18,"endColumn":33,"fix":{"range":[456,464],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":22,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":22,"endColumn":40,"fix":{"range":[541,549],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":23,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":23,"endColumn":36,"fix":{"range":[577,585],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":27,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":27,"endColumn":37,"fix":{"range":[660,668],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":28,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":28,"endColumn":34,"fix":{"range":[694,702],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":29,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":29,"endColumn":39,"fix":{"range":[733,741],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":43,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":43,"endColumn":42,"fix":{"range":[1281,1289],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":44,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":44,"endColumn":43,"fix":{"range":[1324,1332],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":45,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":45,"endColumn":43,"fix":{"range":[1367,1375],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":46,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":46,"endColumn":43,"fix":{"range":[1410,1418],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":47,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":47,"endColumn":44,"fix":{"range":[1454,1462],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":48,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":48,"endColumn":43,"fix":{"range":[1497,1505],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":49,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":49,"endColumn":44,"fix":{"range":[1541,1549],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":50,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":50,"endColumn":44,"fix":{"range":[1585,1593],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":51,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":51,"endColumn":44,"fix":{"range":[1629,1637],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":52,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":52,"endColumn":45,"fix":{"range":[1674,1682],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":53,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":53,"endColumn":45,"fix":{"range":[1719,1727],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":54,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":54,"endColumn":46,"fix":{"range":[1765,1773],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":55,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":55,"endColumn":43,"fix":{"range":[1808,1816],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":56,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":56,"endColumn":38,"fix":{"range":[1846,1854],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":60,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":60,"endColumn":34,"fix":{"range":[1944,1952],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":61,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":61,"endColumn":37,"fix":{"range":[1980,1988],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":62,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":62,"endColumn":40,"fix":{"range":[2020,2028],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":87,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":87,"endColumn":38,"fix":{"range":[2779,2787],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":89,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":89,"endColumn":41,"fix":{"range":[2883,2891],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":93,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":93,"endColumn":40,"fix":{"range":[2974,2982],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":94,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":94,"endColumn":46,"fix":{"range":[3018,3027],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":98,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":98,"endColumn":35,"fix":{"range":[3102,3110],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":99,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":99,"endColumn":37,"fix":{"range":[3139,3147],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":108,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":108,"endColumn":46,"fix":{"range":[3576,3584],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":109,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":109,"endColumn":46,"fix":{"range":[3617,3626],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":113,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":113,"endColumn":38,"fix":{"range":[3710,3718],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":114,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":114,"endColumn":40,"fix":{"range":[3750,3758],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":115,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":115,"endColumn":39,"fix":{"range":[3789,3797],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":116,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":116,"endColumn":41,"fix":{"range":[3830,3838],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":120,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":120,"endColumn":35,"fix":{"range":[3909,3917],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":121,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":121,"endColumn":37,"fix":{"range":[3946,3954],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":124,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":124,"endColumn":43,"fix":{"range":[4136,4144],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":129,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":129,"endColumn":46,"fix":{"range":[4353,4361],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":130,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":130,"endColumn":42,"fix":{"range":[4395,4403],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":134,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":134,"endColumn":39,"fix":{"range":[4478,4486],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":135,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":135,"endColumn":48,"fix":{"range":[4526,4534],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":136,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":136,"endColumn":42,"fix":{"range":[4568,4576],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":140,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":140,"endColumn":36,"fix":{"range":[4652,4660],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":141,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":141,"endColumn":39,"fix":{"range":[4691,4699],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":149,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":149,"endColumn":49,"fix":{"range":[5026,5035],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":150,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":150,"endColumn":47,"fix":{"range":[5073,5082],"text":""}}],"suppressedMessages":[],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":48,"fixableWarningCount":0,"source":"import { Schema, MapSchema, ArraySchema, type } from \"@colyseus/schema\";\nimport {\n  Vector2,\n  EquipmentBonuses,\n  ItemData,\n  CombatStats,\n  Equipment,\n} from \"../types/game\";\n\n/**\n * COLYSEUS SCHEMAS FOR NETWORK SYNCHRONIZATION\n * These MUST stay perfectly in sync with shared types\n * DO NOT modify without updating shared types too\n */\n\nexport class Vector2Schema extends Schema implements Vector2 {\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n}\n\nexport class HealthSchema extends Schema {\n  @type(\"number\") current: number = 10;\n  @type(\"number\") max: number = 10;\n}\n\nexport class SkillSchema extends Schema {\n  @type(\"number\") level: number = 1;\n  @type(\"number\") xp: number = 0;\n  @type(\"number\") boosted: number = 0;\n}\n\nexport class CombatStatsSchema extends Schema implements CombatStats {\n  @type(SkillSchema) attack = new SkillSchema();\n  @type(SkillSchema) strength = new SkillSchema();\n  @type(SkillSchema) defence = new SkillSchema();\n  @type(SkillSchema) hitpoints = new SkillSchema();\n  @type(SkillSchema) ranged = new SkillSchema();\n  @type(SkillSchema) prayer = new SkillSchema();\n  @type(SkillSchema) magic = new SkillSchema();\n}\n\nexport class EquipmentBonusesSchema extends Schema implements EquipmentBonuses {\n  @type(\"number\") attackStab: number = 0;\n  @type(\"number\") attackSlash: number = 0;\n  @type(\"number\") attackCrush: number = 0;\n  @type(\"number\") attackMagic: number = 0;\n  @type(\"number\") attackRanged: number = 0;\n  @type(\"number\") defenceStab: number = 0;\n  @type(\"number\") defenceSlash: number = 0;\n  @type(\"number\") defenceCrush: number = 0;\n  @type(\"number\") defenceMagic: number = 0;\n  @type(\"number\") defenceRanged: number = 0;\n  @type(\"number\") meleeStrength: number = 0;\n  @type(\"number\") rangedStrength: number = 0;\n  @type(\"number\") magicDamage: number = 0;\n  @type(\"number\") prayer: number = 0;\n}\n\nexport class ItemSchema extends Schema implements ItemData {\n  @type(\"number\") id: number = 0;\n  @type(\"string\") name: string = \"\";\n  @type(\"string\") examine: string = \"\";\n  @type(\"string\") equipmentSlot?:\n    | \"weapon\"\n    | \"helmet\"\n    | \"chest\"\n    | \"legs\"\n    | \"shield\"\n    | \"gloves\"\n    | \"boots\"\n    | \"ring\"\n    | \"amulet\" = undefined;\n  @type(EquipmentBonusesSchema) bonuses = new EquipmentBonusesSchema();\n  @type(\"number\") attackSpeed?: number = 5;\n  @type(\"number\") attackRange?: number = 1;\n}\n\nexport class EquipmentSchema extends Schema implements Equipment {\n  @type(ItemSchema) weapon?: ItemSchema = new ItemSchema();\n  @type(ItemSchema) helmet?: ItemSchema = new ItemSchema();\n  @type(ItemSchema) chest?: ItemSchema = new ItemSchema();\n  @type(ItemSchema) legs?: ItemSchema = new ItemSchema();\n  // Add other slots as needed\n}\n\nexport class PrayerSchema extends Schema {\n  @type(\"number\") points: number = 1;\n  @type([\"string\"]) activePrayers = new ArraySchema<string>();\n  @type(\"number\") drainRate: number = 0;\n}\n\nexport class SpecialAttackSchema extends Schema {\n  @type(\"number\") energy: number = 100;\n  @type(\"boolean\") available: boolean = true;\n}\n\nexport class PlayerSchema extends Schema {\n  @type(\"string\") id: string = \"\";\n  @type(\"string\") name: string = \"\";\n  @type(Vector2Schema) position = new Vector2Schema();\n  @type(HealthSchema) health = new HealthSchema();\n  @type(CombatStatsSchema) stats = new CombatStatsSchema();\n  @type(EquipmentSchema) equipment = new EquipmentSchema();\n  @type(PrayerSchema) prayer = new PrayerSchema();\n  @type(SpecialAttackSchema) specialAttack = new SpecialAttackSchema();\n\n  @type(\"string\") target?: string = \"\";\n  @type(\"number\") lastAttackTick: number = 0;\n  @type(\"boolean\") inCombat: boolean = false;\n}\n\nexport class EnemyStatsSchema extends Schema {\n  @type(\"number\") attack: number = 1;\n  @type(\"number\") strength: number = 1;\n  @type(\"number\") defence: number = 1;\n  @type(\"number\") hitpoints: number = 1;\n}\n\nexport class EnemySchema extends Schema {\n  @type(\"string\") id: string = \"\";\n  @type(\"string\") type: string = \"\"; // Corresponds to EnemyType from shared\n  @type(Vector2Schema) position = new Vector2Schema();\n  @type(HealthSchema) health = new HealthSchema();\n  @type(\"number\") combatLevel: number = 1;\n  @type(EnemyStatsSchema) stats = new EnemyStatsSchema();\n  @type(EquipmentBonusesSchema) bonuses = new EquipmentBonusesSchema();\n\n  @type(\"string\") target?: string = \"\";\n  @type(\"number\") lastAttackTick: number = 0;\n  @type(\"number\") aggroRange: number = 5;\n}\n\nexport class WaveSchema extends Schema {\n  @type(\"number\") current: number = 1;\n  @type(\"number\") enemiesRemaining: number = 0;\n  @type(\"number\") nextWaveIn: number = 0;\n}\n\nexport class GameTimeSchema extends Schema {\n  @type(\"number\") tick: number = 0;\n  @type(\"number\") elapsed: number = 0;\n}\n\nexport class GameRoomState extends Schema {\n  @type({ map: PlayerSchema }) players = new MapSchema<PlayerSchema>();\n  @type({ map: EnemySchema }) enemies = new MapSchema<EnemySchema>();\n  @type(WaveSchema) wave = new WaveSchema();\n  @type(GameTimeSchema) gameTime = new GameTimeSchema();\n  @type(\"boolean\") gameStarted: boolean = false;\n  @type(\"boolean\") gameEnded: boolean = false;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\schemas\\game.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":4,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":4,"endColumn":33,"fix":{"range":[106,114],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":5,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":5,"endColumn":33,"fix":{"range":[139,147],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":6,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":6,"endColumn":46,"fix":{"range":[181,190],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":9,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":9,"endColumn":38,"fix":{"range":[247,255],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":10,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":10,"endColumn":40,"fix":{"range":[287,295],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":11,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":11,"endColumn":39,"fix":{"range":[326,334],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":12,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":12,"endColumn":39,"fix":{"range":[364,372],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":13,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":13,"endColumn":42,"fix":{"range":[406,414],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":16,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":16,"endColumn":46,"fix":{"range":[472,480],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":20,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":20,"endColumn":35,"fix":{"range":[545,553],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":21,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":21,"endColumn":43,"fix":{"range":[582,590],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":22,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":22,"endColumn":33,"fix":{"range":[622,630],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":23,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":23,"endColumn":33,"fix":{"range":[655,663],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":24,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":24,"endColumn":38,"fix":{"range":[693,701],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":25,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":25,"endColumn":41,"fix":{"range":[734,742],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":26,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":26,"endColumn":38,"fix":{"range":[772,780],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":27,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":27,"endColumn":40,"fix":{"range":[812,820],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":28,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":28,"endColumn":39,"fix":{"range":[851,859],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":29,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":29,"endColumn":42,"fix":{"range":[889,898],"text":""}}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":19,"fixableWarningCount":0,"source":"import { Schema, type } from \"@colyseus/schema\";\n\nexport class Player extends Schema {\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n  @type(\"boolean\") connected: boolean = true;\n\n  // OSRS Combat Stats\n  @type(\"number\") attack: number = 1;\n  @type(\"number\") strength: number = 1;\n  @type(\"number\") defence: number = 1;\n  @type(\"number\") health: number = 10;\n  @type(\"number\") maxHealth: number = 10;\n\n  // Combat state\n  @type(\"number\") lastAttackTick: number = 0;\n}\n\nexport class Enemy extends Schema {\n  @type(\"string\") id: string = \"\";\n  @type(\"string\") type: string = \"goblin\";\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n  @type(\"number\") health: number = 5;\n  @type(\"number\") maxHealth: number = 5;\n  @type(\"number\") attack: number = 1;\n  @type(\"number\") strength: number = 1;\n  @type(\"number\") defence: number = 1;\n  @type(\"boolean\") alive: boolean = true;\n}\n\nexport class GameRoomState extends Schema {}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\game.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\game.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\osrs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\osrs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\utils\\validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\utils\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
