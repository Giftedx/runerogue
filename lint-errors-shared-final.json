[{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\__mocks__\\p-limit.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'concurrency' is defined but never used. Allowed unused args must match /^_/u.","line":5,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"concurrency"},"fix":{"range":[151,162],"text":""},"desc":"Remove unused variable 'concurrency'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Mock for p-limit module to resolve Jest ESM compatibility issues\n * This provides a CommonJS-compatible version for testing\n */\nconst pLimit = (concurrency) => {\n  return (fn, ...args) => {\n    return Promise.resolve(fn(...args));\n  };\n};\n\npLimit.default = pLimit;\n\nmodule.exports = pLimit;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\__tests__\\basic.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":6,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":8,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":10,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":11,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Basic test file for shared package\n * @description Ensures the package can be tested and imported properly\n */\ndescribe(\"Shared Package\", () => {\n  it(\"should be able to import the main module\", async () => {\n    const shared = await import(\"../index\");\n    expect(shared).toBeDefined();\n  });\n  it(\"should pass basic test to verify Jest is working\", () => {\n    expect(true).toBe(true);\n  });\n});\nexport {};\n//# sourceMappingURL=basic.test.js.map\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\__tests__\\basic.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages\\shared\\src\\__tests__\\basic.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Basic test file for shared package\n * @description Ensures the package can be tested and imported properly\n */\n\nimport type { Vector2 } from \"../types/game\";\n\ndescribe(\"Shared Package\", () => {\n  it(\"should be able to import shared types\", () => {\n    // Test that we can use the type (TypeScript compilation check)\n    const position: Vector2 = { x: 10, y: 20 };\n    expect(position.x).toBe(10);\n    expect(position.y).toBe(20);\n  });\n\n  it(\"should pass basic test to verify Jest is working\", () => {\n    expect(true).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\constants\\game.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\constants\\game.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages\\shared\\src\\constants\\game.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * RuneRogue Game Constants\n */\n\nexport const GAME_CONSTANTS = {\n  // Vampire Survivors style constants\n  WAVE_DURATION_MS: 30000, // 30 seconds per wave\n  MAX_ENEMIES_PER_WAVE: 50,\n  EXPERIENCE_DROP_DURATION_MS: 5000,\n\n  // Discord limits\n  MAX_PLAYERS_PER_ROOM: 4,\n\n  // Server configuration\n  DEFAULT_OSRS_DATA_PORT: 3001,\n  DEFAULT_GAME_SERVER_PORT: 2567,\n\n  // Game mechanics\n  MOVEMENT_SPEED: 100, // pixels per second\n  VIEWPORT_WIDTH: 800,\n  VIEWPORT_HEIGHT: 600,\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\result.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\schemas\\GameRoomState.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":17,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":17,"endColumn":33,"fix":{"range":[423,431],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":18,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":18,"endColumn":33,"fix":{"range":[456,464],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":22,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":22,"endColumn":40,"fix":{"range":[541,549],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":23,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":23,"endColumn":36,"fix":{"range":[577,585],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":27,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":27,"endColumn":37,"fix":{"range":[660,668],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":28,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":28,"endColumn":34,"fix":{"range":[694,702],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":29,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":29,"endColumn":39,"fix":{"range":[733,741],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":43,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":43,"endColumn":42,"fix":{"range":[1281,1289],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":44,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":44,"endColumn":43,"fix":{"range":[1324,1332],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":45,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":45,"endColumn":43,"fix":{"range":[1367,1375],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":46,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":46,"endColumn":43,"fix":{"range":[1410,1418],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":47,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":47,"endColumn":44,"fix":{"range":[1454,1462],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":48,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":48,"endColumn":43,"fix":{"range":[1497,1505],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":49,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":49,"endColumn":44,"fix":{"range":[1541,1549],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":50,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":50,"endColumn":44,"fix":{"range":[1585,1593],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":51,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":51,"endColumn":44,"fix":{"range":[1629,1637],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":52,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":52,"endColumn":45,"fix":{"range":[1674,1682],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":53,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":53,"endColumn":45,"fix":{"range":[1719,1727],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":54,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":54,"endColumn":46,"fix":{"range":[1765,1773],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":55,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":55,"endColumn":43,"fix":{"range":[1808,1816],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":56,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":56,"endColumn":38,"fix":{"range":[1846,1854],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":60,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":60,"endColumn":34,"fix":{"range":[1944,1952],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":61,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":61,"endColumn":37,"fix":{"range":[1980,1988],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":62,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":62,"endColumn":40,"fix":{"range":[2020,2028],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":87,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":87,"endColumn":38,"fix":{"range":[2779,2787],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":89,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":89,"endColumn":41,"fix":{"range":[2883,2891],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":93,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":93,"endColumn":40,"fix":{"range":[2974,2982],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":94,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":94,"endColumn":46,"fix":{"range":[3018,3027],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":98,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":98,"endColumn":35,"fix":{"range":[3102,3110],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":99,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":99,"endColumn":37,"fix":{"range":[3139,3147],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":108,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":108,"endColumn":46,"fix":{"range":[3576,3584],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":109,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":109,"endColumn":46,"fix":{"range":[3617,3626],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":113,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":113,"endColumn":38,"fix":{"range":[3710,3718],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":114,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":114,"endColumn":40,"fix":{"range":[3750,3758],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":115,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":115,"endColumn":39,"fix":{"range":[3789,3797],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":116,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":116,"endColumn":41,"fix":{"range":[3830,3838],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":120,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":120,"endColumn":35,"fix":{"range":[3909,3917],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":121,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":121,"endColumn":37,"fix":{"range":[3946,3954],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":124,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":124,"endColumn":43,"fix":{"range":[4136,4144],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":129,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":129,"endColumn":46,"fix":{"range":[4353,4361],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":130,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":130,"endColumn":42,"fix":{"range":[4395,4403],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":134,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":134,"endColumn":39,"fix":{"range":[4478,4486],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":135,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":135,"endColumn":48,"fix":{"range":[4526,4534],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":136,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":136,"endColumn":42,"fix":{"range":[4568,4576],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":140,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":140,"endColumn":36,"fix":{"range":[4652,4660],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":141,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":141,"endColumn":39,"fix":{"range":[4691,4699],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":149,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":149,"endColumn":49,"fix":{"range":[5026,5035],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":150,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":150,"endColumn":47,"fix":{"range":[5073,5082],"text":""}}],"suppressedMessages":[],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":48,"fixableWarningCount":0,"source":"import { Schema, MapSchema, ArraySchema, type } from \"@colyseus/schema\";\nimport {\n  Vector2,\n  EquipmentBonuses,\n  ItemData,\n  CombatStats,\n  Equipment,\n} from \"../types/game\";\n\n/**\n * COLYSEUS SCHEMAS FOR NETWORK SYNCHRONIZATION\n * These MUST stay perfectly in sync with shared types\n * DO NOT modify without updating shared types too\n */\n\nexport class Vector2Schema extends Schema implements Vector2 {\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n}\n\nexport class HealthSchema extends Schema {\n  @type(\"number\") current: number = 10;\n  @type(\"number\") max: number = 10;\n}\n\nexport class SkillSchema extends Schema {\n  @type(\"number\") level: number = 1;\n  @type(\"number\") xp: number = 0;\n  @type(\"number\") boosted: number = 0;\n}\n\nexport class CombatStatsSchema extends Schema implements CombatStats {\n  @type(SkillSchema) attack = new SkillSchema();\n  @type(SkillSchema) strength = new SkillSchema();\n  @type(SkillSchema) defence = new SkillSchema();\n  @type(SkillSchema) hitpoints = new SkillSchema();\n  @type(SkillSchema) ranged = new SkillSchema();\n  @type(SkillSchema) prayer = new SkillSchema();\n  @type(SkillSchema) magic = new SkillSchema();\n}\n\nexport class EquipmentBonusesSchema extends Schema implements EquipmentBonuses {\n  @type(\"number\") attackStab: number = 0;\n  @type(\"number\") attackSlash: number = 0;\n  @type(\"number\") attackCrush: number = 0;\n  @type(\"number\") attackMagic: number = 0;\n  @type(\"number\") attackRanged: number = 0;\n  @type(\"number\") defenceStab: number = 0;\n  @type(\"number\") defenceSlash: number = 0;\n  @type(\"number\") defenceCrush: number = 0;\n  @type(\"number\") defenceMagic: number = 0;\n  @type(\"number\") defenceRanged: number = 0;\n  @type(\"number\") meleeStrength: number = 0;\n  @type(\"number\") rangedStrength: number = 0;\n  @type(\"number\") magicDamage: number = 0;\n  @type(\"number\") prayer: number = 0;\n}\n\nexport class ItemSchema extends Schema implements ItemData {\n  @type(\"number\") id: number = 0;\n  @type(\"string\") name: string = \"\";\n  @type(\"string\") examine: string = \"\";\n  @type(\"string\") equipmentSlot?:\n    | \"weapon\"\n    | \"helmet\"\n    | \"chest\"\n    | \"legs\"\n    | \"shield\"\n    | \"gloves\"\n    | \"boots\"\n    | \"ring\"\n    | \"amulet\" = undefined;\n  @type(EquipmentBonusesSchema) bonuses = new EquipmentBonusesSchema();\n  @type(\"number\") attackSpeed?: number = 5;\n  @type(\"number\") attackRange?: number = 1;\n}\n\nexport class EquipmentSchema extends Schema implements Equipment {\n  @type(ItemSchema) weapon?: ItemSchema = new ItemSchema();\n  @type(ItemSchema) helmet?: ItemSchema = new ItemSchema();\n  @type(ItemSchema) chest?: ItemSchema = new ItemSchema();\n  @type(ItemSchema) legs?: ItemSchema = new ItemSchema();\n  // Add other slots as needed\n}\n\nexport class PrayerSchema extends Schema {\n  @type(\"number\") points: number = 1;\n  @type([\"string\"]) activePrayers = new ArraySchema<string>();\n  @type(\"number\") drainRate: number = 0;\n}\n\nexport class SpecialAttackSchema extends Schema {\n  @type(\"number\") energy: number = 100;\n  @type(\"boolean\") available: boolean = true;\n}\n\nexport class PlayerSchema extends Schema {\n  @type(\"string\") id: string = \"\";\n  @type(\"string\") name: string = \"\";\n  @type(Vector2Schema) position = new Vector2Schema();\n  @type(HealthSchema) health = new HealthSchema();\n  @type(CombatStatsSchema) stats = new CombatStatsSchema();\n  @type(EquipmentSchema) equipment = new EquipmentSchema();\n  @type(PrayerSchema) prayer = new PrayerSchema();\n  @type(SpecialAttackSchema) specialAttack = new SpecialAttackSchema();\n\n  @type(\"string\") target?: string = \"\";\n  @type(\"number\") lastAttackTick: number = 0;\n  @type(\"boolean\") inCombat: boolean = false;\n}\n\nexport class EnemyStatsSchema extends Schema {\n  @type(\"number\") attack: number = 1;\n  @type(\"number\") strength: number = 1;\n  @type(\"number\") defence: number = 1;\n  @type(\"number\") hitpoints: number = 1;\n}\n\nexport class EnemySchema extends Schema {\n  @type(\"string\") id: string = \"\";\n  @type(\"string\") type: string = \"\"; // Corresponds to EnemyType from shared\n  @type(Vector2Schema) position = new Vector2Schema();\n  @type(HealthSchema) health = new HealthSchema();\n  @type(\"number\") combatLevel: number = 1;\n  @type(EnemyStatsSchema) stats = new EnemyStatsSchema();\n  @type(EquipmentBonusesSchema) bonuses = new EquipmentBonusesSchema();\n\n  @type(\"string\") target?: string = \"\";\n  @type(\"number\") lastAttackTick: number = 0;\n  @type(\"number\") aggroRange: number = 5;\n}\n\nexport class WaveSchema extends Schema {\n  @type(\"number\") current: number = 1;\n  @type(\"number\") enemiesRemaining: number = 0;\n  @type(\"number\") nextWaveIn: number = 0;\n}\n\nexport class GameTimeSchema extends Schema {\n  @type(\"number\") tick: number = 0;\n  @type(\"number\") elapsed: number = 0;\n}\n\nexport class GameRoomState extends Schema {\n  @type({ map: PlayerSchema }) players = new MapSchema<PlayerSchema>();\n  @type({ map: EnemySchema }) enemies = new MapSchema<EnemySchema>();\n  @type(WaveSchema) wave = new WaveSchema();\n  @type(GameTimeSchema) gameTime = new GameTimeSchema();\n  @type(\"boolean\") gameStarted: boolean = false;\n  @type(\"boolean\") gameEnded: boolean = false;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\schemas\\game.ts","messages":[{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":4,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":4,"endColumn":33,"fix":{"range":[106,114],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":5,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":5,"endColumn":33,"fix":{"range":[139,147],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":6,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":6,"endColumn":46,"fix":{"range":[181,190],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":9,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":9,"endColumn":38,"fix":{"range":[247,255],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":10,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":10,"endColumn":40,"fix":{"range":[287,295],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":11,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":11,"endColumn":39,"fix":{"range":[326,334],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":12,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":12,"endColumn":39,"fix":{"range":[364,372],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":13,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":13,"endColumn":42,"fix":{"range":[406,414],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":16,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":16,"endColumn":46,"fix":{"range":[472,480],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":20,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":20,"endColumn":35,"fix":{"range":[545,553],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type string trivially inferred from a string literal, remove type annotation.","line":21,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":21,"endColumn":43,"fix":{"range":[582,590],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":22,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":22,"endColumn":33,"fix":{"range":[622,630],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":23,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":23,"endColumn":33,"fix":{"range":[655,663],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":24,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":24,"endColumn":38,"fix":{"range":[693,701],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":25,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":25,"endColumn":41,"fix":{"range":[734,742],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":26,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":26,"endColumn":38,"fix":{"range":[772,780],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":27,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":27,"endColumn":40,"fix":{"range":[812,820],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type number trivially inferred from a number literal, remove type annotation.","line":28,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":28,"endColumn":39,"fix":{"range":[851,859],"text":""}},{"ruleId":"@typescript-eslint/no-inferrable-types","severity":2,"message":"Type boolean trivially inferred from a boolean literal, remove type annotation.","line":29,"column":3,"nodeType":"PropertyDefinition","messageId":"noInferrableType","endLine":29,"endColumn":42,"fix":{"range":[889,898],"text":""}}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":19,"fixableWarningCount":0,"source":"import { Schema, type } from \"@colyseus/schema\";\n\nexport class Player extends Schema {\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n  @type(\"boolean\") connected: boolean = true;\n\n  // OSRS Combat Stats\n  @type(\"number\") attack: number = 1;\n  @type(\"number\") strength: number = 1;\n  @type(\"number\") defence: number = 1;\n  @type(\"number\") health: number = 10;\n  @type(\"number\") maxHealth: number = 10;\n\n  // Combat state\n  @type(\"number\") lastAttackTick: number = 0;\n}\n\nexport class Enemy extends Schema {\n  @type(\"string\") id: string = \"\";\n  @type(\"string\") type: string = \"goblin\";\n  @type(\"number\") x: number = 0;\n  @type(\"number\") y: number = 0;\n  @type(\"number\") health: number = 5;\n  @type(\"number\") maxHealth: number = 5;\n  @type(\"number\") attack: number = 1;\n  @type(\"number\") strength: number = 1;\n  @type(\"number\") defence: number = 1;\n  @type(\"boolean\") alive: boolean = true;\n}\n\nexport class GameRoomState extends Schema {}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\game.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\game.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages\\shared\\src\\types\\game.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OSRS-ACCURATE SHARED TYPES\n * These MUST match OSRS data structures exactly for authenticity\n */\n\n// Core position and movement\nexport interface Vector2 {\n  x: number;\n  y: number;\n}\n\n// OSRS skill levels (1-99)\nexport interface SkillLevel {\n  level: number;\n  xp: number;\n  boosted?: number; // For potions/prayers\n}\n\n// OSRS combat stats (must match OSRS exactly)\nexport interface CombatStats {\n  attack: SkillLevel;\n  strength: SkillLevel;\n  defence: SkillLevel;\n  hitpoints: SkillLevel;\n  ranged: SkillLevel;\n  prayer: SkillLevel;\n  magic: SkillLevel;\n}\n\n// OSRS equipment bonuses (exact format from game)\nexport interface EquipmentBonuses {\n  // Attack bonuses\n  attackStab: number;\n  attackSlash: number;\n  attackCrush: number;\n  attackMagic: number;\n  attackRanged: number;\n  // Defence bonuses\n  defenceStab: number;\n  defenceSlash: number;\n  defenceCrush: number;\n  defenceMagic: number;\n  defenceRanged: number;\n  // Other bonuses\n  meleeStrength: number;\n  rangedStrength: number;\n  magicDamage: number;\n  prayer: number;\n}\n\n// OSRS item definition\nexport interface ItemData {\n  id: number;\n  name: string;\n  examine: string;\n  equipmentSlot?:\n    | \"weapon\"\n    | \"helmet\"\n    | \"chest\"\n    | \"legs\"\n    | \"shield\"\n    | \"gloves\"\n    | \"boots\"\n    | \"ring\"\n    | \"amulet\";\n  bonuses: EquipmentBonuses;\n  attackSpeed?: number; // Weapon attack speed in game ticks\n  attackRange?: number; // Weapon range in tiles\n  specialAttack?: {\n    energyCost: number; // 25%, 50%, etc.\n    effect: string; // Special attack effect ID\n  };\n}\n\n// Player equipment loadout\nexport interface Equipment {\n  weapon?: ItemData;\n  helmet?: ItemData;\n  chest?: ItemData;\n  legs?: ItemData;\n  shield?: ItemData;\n  gloves?: ItemData;\n  boots?: ItemData;\n  ring?: ItemData;\n  amulet?: ItemData;\n}\n\n// OSRS prayer state\nexport interface PrayerState {\n  points: number; // Current prayer points (0-99)\n  activePrayers: string[]; // Active prayer names\n  drainRate: number; // Points per second drain\n}\n\n// Complete player state for synchronization\nexport interface PlayerState {\n  id: string;\n  name: string;\n  position: Vector2;\n  health: {\n    current: number;\n    max: number;\n  };\n  stats: CombatStats;\n  equipment: Equipment;\n  prayer: PrayerState;\n  specialAttack: {\n    energy: number; // 0-100%\n    available: boolean;\n  };\n  // Combat state\n  target?: string; // Entity ID being attacked\n  lastAttackTick: number;\n  inCombat: boolean;\n}\n\n// Enemy types (OSRS creatures)\nexport type EnemyType =\n  | \"chicken\"\n  | \"rat\"\n  | \"spider\"\n  | \"cow\" // Wave 1-3\n  | \"goblin\"\n  | \"imp\"\n  | \"guard\" // Wave 4-6\n  | \"wizard\"\n  | \"dark_wizard\"\n  | \"hobgoblin\" // Wave 7-10\n  | \"hill_giant\"\n  | \"moss_giant\"\n  | \"fire_giant\" // Wave 11-15\n  | \"lesser_demon\"\n  | \"greater_demon\"\n  | \"black_demon\"; // Wave 16+;\n\n// Enemy state for synchronization\nexport interface EnemyState {\n  id: string;\n  type: EnemyType;\n  position: Vector2;\n  health: {\n    current: number;\n    max: number;\n  };\n  combatLevel: number;\n  stats: {\n    attack: number;\n    strength: number;\n    defence: number;\n    hitpoints: number;\n  };\n  bonuses: EquipmentBonuses;\n  // AI state\n  target?: string; // Player ID being attacked\n  lastAttackTick: number;\n  aggroRange: number;\n}\n\n// Complete game state\nexport interface GameState {\n  players: Map<string, PlayerState>;\n  enemies: Map<string, EnemyState>;\n  wave: {\n    current: number;\n    enemiesRemaining: number;\n    nextWaveIn: number; // Seconds until next wave\n  };\n  gameTime: {\n    tick: number; // Game tick counter\n    elapsed: number; // Total seconds elapsed\n  };\n}\n\n// Network message types (client -> server)\nexport type ClientMessage =\n  | { type: \"move\"; target: Vector2 }\n  | { type: \"attack\"; targetId: string }\n  | { type: \"stopAttack\" }\n  | { type: \"prayer\"; action: \"activate\" | \"deactivate\"; prayer: string }\n  | { type: \"specialAttack\"; targetId?: string }\n  | { type: \"equipItem\"; itemId: number; slot: string }\n  | { type: \"chat\"; message: string };\n\n// Network message types (server -> client)\nexport type ServerMessage =\n  | { type: \"stateUpdate\"; state: Partial<GameState> }\n  | {\n      type: \"damage\";\n      attackerId: string;\n      targetId: string;\n      damage: number;\n      hitType: \"hit\" | \"max\" | \"miss\";\n    }\n  | {\n      type: \"xpGain\";\n      skill: keyof CombatStats;\n      amount: number;\n      newLevel?: number;\n    }\n  | { type: \"levelUp\"; skill: keyof CombatStats; newLevel: number }\n  | { type: \"waveComplete\"; wave: number; bonusXp: number }\n  | {\n      type: \"waveStart\";\n      wave: number;\n      enemyCount: number;\n      enemyTypes: EnemyType[];\n    }\n  | { type: \"playerDeath\"; playerId: string; respawnIn: number }\n  | {\n      type: \"gameOver\";\n      survivedWaves: number;\n      totalXp: number;\n      timePlayed: number;\n    }\n  | {\n      type: \"chatMessage\";\n      playerId: string;\n      playerName: string;\n      message: string;\n    };\n\n// Wave configuration\nexport interface WaveConfig {\n  wave: number;\n  enemyCount: number;\n  enemyTypes: EnemyType[];\n  spawnDelay: number; // MS between spawns\n  combatLevelBonus: number; // Added to base enemy stats\n  specialRules?: {\n    fastSpawn?: boolean;\n    eliteEnemies?: boolean;\n    bossEnemy?: EnemyType;\n  };\n}\n\n// Game settings\nexport interface GameSettings {\n  maxPlayers: number;\n  tickRate: number; // Server ticks per second (should be ~1.67 for OSRS accuracy)\n  waveDelay: number; // Seconds between waves\n  respawnTime: number; // Seconds to respawn after death\n  xpMultiplier: number; // XP rate multiplier (1.0 = OSRS rates)\n  friendlyFire: boolean;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\osrs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\types\\osrs.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages\\shared\\src\\types\\osrs.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OSRS-SPECIFIC CONSTANTS AND ENUMS\n * These MUST match OSRS exactly for authenticity\n */\n\n// OSRS prayer names (exact spelling)\nexport enum Prayer {\n  THICK_SKIN = \"thick_skin\",\n  BURST_OF_STRENGTH = \"burst_of_strength\",\n  CLARITY_OF_THOUGHT = \"clarity_of_thought\",\n  SHARP_EYE = \"sharp_eye\",\n  MYSTIC_WILL = \"mystic_will\",\n  ROCK_SKIN = \"rock_skin\",\n  SUPERHUMAN_STRENGTH = \"superhuman_strength\",\n  IMPROVED_REFLEXES = \"improved_reflexes\",\n  RAPID_RESTORE = \"rapid_restore\",\n  RAPID_HEAL = \"rapid_heal\",\n  PROTECT_ITEM = \"protect_item\",\n  HAWK_EYE = \"hawk_eye\",\n  MYSTIC_LORE = \"mystic_lore\",\n  STEEL_SKIN = \"steel_skin\",\n  ULTIMATE_STRENGTH = \"ultimate_strength\",\n  INCREDIBLE_REFLEXES = \"incredible_reflexes\",\n  PROTECT_FROM_MAGIC = \"protect_from_magic\",\n  PROTECT_FROM_MISSILES = \"protect_from_missiles\",\n  PROTECT_FROM_MELEE = \"protect_from_melee\",\n  EAGLE_EYE = \"eagle_eye\",\n  MYSTIC_MIGHT = \"mystic_might\",\n  RETRIBUTION = \"retribution\",\n  REDEMPTION = \"redemption\",\n  SMITE = \"smite\",\n  CHIVALRY = \"chivalry\",\n  PIETY = \"piety\",\n}\n\n// Prayer effects (OSRS-accurate)\nexport interface PrayerEffect {\n  drainRate: number; // Points per 3 seconds (OSRS standard)\n  attackBonus?: number; // Percentage boost\n  strengthBonus?: number;\n  defenceBonus?: number;\n  rangedBonus?: number;\n  magicBonus?: number;\n  protectionType?: \"melee\" | \"ranged\" | \"magic\";\n  protectionAmount?: number; // Damage reduction percentage\n}\n\nexport const PRAYER_EFFECTS: Record<Prayer, PrayerEffect> = {\n  [Prayer.THICK_SKIN]: { drainRate: 1 / 6, defenceBonus: 0.05 },\n  [Prayer.BURST_OF_STRENGTH]: { drainRate: 1 / 6, strengthBonus: 0.05 },\n  [Prayer.CLARITY_OF_THOUGHT]: { drainRate: 1 / 6, attackBonus: 0.05 },\n  [Prayer.SHARP_EYE]: { drainRate: 1 / 6, rangedBonus: 0.05 },\n  [Prayer.MYSTIC_WILL]: { drainRate: 1 / 6, magicBonus: 0.05 },\n  [Prayer.ROCK_SKIN]: { drainRate: 1 / 12, defenceBonus: 0.1 },\n  [Prayer.SUPERHUMAN_STRENGTH]: { drainRate: 1 / 12, strengthBonus: 0.1 },\n  [Prayer.IMPROVED_REFLEXES]: { drainRate: 1 / 12, attackBonus: 0.1 },\n  [Prayer.RAPID_RESTORE]: { drainRate: 1 / 36 },\n  [Prayer.RAPID_HEAL]: { drainRate: 1 / 18 },\n  [Prayer.PROTECT_ITEM]: { drainRate: 1 / 18 },\n  [Prayer.HAWK_EYE]: { drainRate: 1 / 18, rangedBonus: 0.1 },\n  [Prayer.MYSTIC_LORE]: { drainRate: 1 / 18, magicBonus: 0.1 },\n  [Prayer.STEEL_SKIN]: { drainRate: 1 / 24, defenceBonus: 0.15 },\n  [Prayer.ULTIMATE_STRENGTH]: { drainRate: 1 / 24, strengthBonus: 0.15 },\n  [Prayer.INCREDIBLE_REFLEXES]: { drainRate: 1 / 24, attackBonus: 0.15 },\n  [Prayer.PROTECT_FROM_MAGIC]: {\n    drainRate: 1 / 3,\n    protectionType: \"magic\",\n    protectionAmount: 1.0,\n  },\n  [Prayer.PROTECT_FROM_MISSILES]: {\n    drainRate: 1 / 3,\n    protectionType: \"ranged\",\n    protectionAmount: 1.0,\n  },\n  [Prayer.PROTECT_FROM_MELEE]: {\n    drainRate: 1 / 3,\n    protectionType: \"melee\",\n    protectionAmount: 1.0,\n  },\n  [Prayer.EAGLE_EYE]: { drainRate: 1 / 18, rangedBonus: 0.15 },\n  [Prayer.MYSTIC_MIGHT]: { drainRate: 1 / 18, magicBonus: 0.15 },\n  [Prayer.RETRIBUTION]: { drainRate: 1 / 12 },\n  [Prayer.REDEMPTION]: { drainRate: 1 / 6 },\n  [Prayer.SMITE]: { drainRate: 1 / 18 },\n  [Prayer.CHIVALRY]: {\n    drainRate: 1 / 6,\n    attackBonus: 0.15,\n    strengthBonus: 0.18,\n    defenceBonus: 0.2,\n  },\n  [Prayer.PIETY]: {\n    drainRate: 1 / 6,\n    attackBonus: 0.2,\n    strengthBonus: 0.23,\n    defenceBonus: 0.25,\n  },\n};\n\n// OSRS weapon attack speeds (in game ticks)\nexport const WEAPON_SPEEDS: Record<string, number> = {\n  dagger: 4,\n  shortsword: 4,\n  scimitar: 4,\n  sword: 5,\n  longsword: 5,\n  battleaxe: 6,\n  mace: 5,\n  warhammer: 6,\n  spear: 5,\n  halberd: 7,\n  staff: 5,\n  shortbow: 5,\n  longbow: 6,\n  crossbow: 5,\n  dart: 3,\n  javelin: 5,\n  throwing_knife: 3,\n};\n\n// OSRS combat styles\nexport enum CombatStyle {\n  ACCURATE = \"accurate\", // +3 attack levels\n  AGGRESSIVE = \"aggressive\", // +3 strength levels\n  DEFENSIVE = \"defensive\", // +3 defence levels\n  CONTROLLED = \"controlled\", // +1 attack, strength, defence\n}\n\n// XP rates for different combat styles\nexport const COMBAT_XP_RATES = {\n  [CombatStyle.ACCURATE]: {\n    attack: 4,\n    strength: 0,\n    defence: 0,\n    hitpoints: 1.33,\n  },\n  [CombatStyle.AGGRESSIVE]: {\n    attack: 0,\n    strength: 4,\n    defence: 0,\n    hitpoints: 1.33,\n  },\n  [CombatStyle.DEFENSIVE]: {\n    attack: 0,\n    strength: 0,\n    defence: 4,\n    hitpoints: 1.33,\n  },\n  [CombatStyle.CONTROLLED]: {\n    attack: 1.33,\n    strength: 1.33,\n    defence: 1.33,\n    hitpoints: 1.33,\n  },\n};\n\n/**\n * OSRS Combat Stats Interface\n * Player combat levels for damage and accuracy calculations\n */\nexport interface OSRSCombatStats {\n  attack: number;\n  strength: number;\n  defence: number;\n  hitpoints: number;\n  prayer: number;\n  ranged?: number;\n  magic?: number;\n}\n\n/**\n * OSRS Equipment Bonuses Interface\n * Equipment attack, strength, and defence bonuses\n */\nexport interface OSRSEquipmentBonuses {\n  attackBonus: number; // Melee attack bonus\n  strengthBonus: number; // Melee strength bonus\n  defenceBonus: number; // Melee defence bonus\n\n  // Optional specific attack bonuses\n  attackStab?: number;\n  attackSlash?: number;\n  attackCrush?: number;\n  attackMagic?: number;\n  attackRanged?: number;\n\n  // Optional defence bonuses\n  defenceStab?: number;\n  defenceSlash?: number;\n  defenceCrush?: number;\n  defenceMagic?: number;\n  defenceRanged?: number;\n\n  // Optional other bonuses\n  rangedStrengthBonus?: number;\n  magicDamageBonus?: number;\n  prayerBonus?: number;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\utils\\validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\aggis\\GitHub\\runerogue\\packages\\shared\\src\\utils\\validation.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): packages\\shared\\src\\utils\\validation.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Validation Utilities\n * Common validation functions for RuneRogue\n */\n\n// import { OSRSCombatStats, OSRSEnemy } from '../types/osrs';\n// These types are no longer exported from osrs.ts, so we comment out or remove related validation functions.\n\n/**\n * Validate OSRS combat stats\n */\n// export function validateCombatStats(stats: OSRSCombatStats): boolean {\n//   return (\n//     stats.attack >= 1 && stats.attack <= 99 &&\n//     stats.strength >= 1 && stats.strength <= 99 &&\n//     stats.defence >= 1 && stats.defence <= 99 &&\n//     stats.hitpoints >= 10 && stats.hitpoints <= 99 &&\n//     stats.prayer >= 1 && stats.prayer <= 99\n//   );\n// }\n\n/**\n * Validate enemy data\n */\n// export function validateEnemyData(enemy: OSRSEnemy): boolean {\n//   return (\n//     Boolean(enemy.id) && enemy.id.length > 0 &&\n//     Boolean(enemy.name) && enemy.name.length > 0 &&\n//     enemy.combatLevel >= 1 &&\n//     enemy.hitpoints >= 1 &&\n//     enemy.attackLevel >= 1 &&\n//     enemy.defenceLevel >= 1 &&\n//     enemy.maxHit >= 0 &&\n//     enemy.attackSpeed >= 1\n//   );\n// }\n\n/**\n * Validate calculation result\n */\nexport function validateCalculationResult(result: number): boolean {\n  return !isNaN(result) && isFinite(result) && result >= 0;\n}\n","usedDeprecatedRules":[]}]