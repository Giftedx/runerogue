name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - '**/*.txt'
      - '.gitignore'
      - '.gitattributes'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

defaults:
  run:
    working-directory: server-ts

env:
  NODE_VERSION: '20.x'  # Using LTS version for stability
  NPM_VERSION: '10.x'
  CI: true
  NODE_ENV: test

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check formatting
      run: npm run format:check
      
    - name: Check TypeScript types
      run: npm run type-check

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm test -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          package*.json
          node_modules/
        retention-days: 5
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./
    
    - name: Deploy to staging
      run: echo "Deploying to staging environment"
      # Add your deployment commands here
      # Example: npm run deploy:staging
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./
    
    - name: Deploy to production
      run: echo "Deploying to production environment"
      # Add your production deployment commands here
      # Example: npm run deploy:production
