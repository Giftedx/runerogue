name: Create and Assign Copilot Task

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Issue title"
        required: true
      task_type:
        description: "Task type (Testing, Documentation, Linting, Feature, Bug)"
        required: true
        default: "Documentation"
      priority:
        description: "Priority (High, Medium, Low)"
        required: true
        default: "Medium"
      description:
        description: "Task description"
        required: true
      acceptance_criteria:
        description: "Acceptance criteria (comma-separated list)"
        required: true

jobs:
  create-and-assign:
    runs-on: ubuntu-latest
    steps:
      - name: Create issue and assign to Copilot
        id: create-issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Ensure 'copilot' label exists
            console.log('Checking if copilot label exists...');
            try {
              await github.rest.issues.getLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'copilot'
              });
              console.log('Copilot label exists.');
            } catch (error) {
              console.log('Copilot label does not exist. Creating it...');
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'copilot',
                color: '8a2be2', // BlueViolet color
                description: 'Tasks for GitHub Copilot Agent'
              });
              console.log('Copilot label created.');
            }

            // Parse acceptance criteria into a list
            const criteriaList = context.payload.inputs.acceptance_criteria
              .split(',')
              .map(item => item.trim())
              .filter(item => item.length > 0)
              .map(item => `- [ ] ${item}`);

            // Format the issue body using the Copilot Agent task template
            const issueBody = `## Task Type:
            ${context.payload.inputs.task_type}

            ## Priority:
            ${context.payload.inputs.priority}

            ## Description:
            ${context.payload.inputs.description}

            ## Acceptance Criteria:
            ${criteriaList.join('\n')}

            ## Environment:
            - [ ] Development
            - [ ] Testing
            - [ ] Production

            ## Additional Information:
            Created via GitHub Actions workflow at ${new Date().toISOString()}`;

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: context.payload.inputs.title,
              body: issueBody,
              labels: ['copilot']
            });

            console.log(`Created issue #${issue.data.number}`);

            // Assign to GitHub Copilot
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              assignees: ['Copilot']
            });

            console.log(`Assigned issue #${issue.data.number} to GitHub Copilot SWE Agent`);

            // Add a comment to indicate the assignment was done automatically
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: `This issue has been automatically created and assigned to GitHub Copilot for processing.
              
              The self-hosted runner will process this task shortly.
              
              [View Workflow Status](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

            // Set outputs for use in subsequent steps
            return { 
              issue_number: issue.data.number,
              issue_url: issue.data.html_url
            };

      - name: Output issue details
        run: |
          echo "Created issue #${{ fromJSON(steps.create-issue.outputs.result).issue_number }}"
          echo "Issue URL: ${{ fromJSON(steps.create-issue.outputs.result).issue_url }}"
