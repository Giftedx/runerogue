name: Node.js CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
    paths-ignore:
      - "**/*.md"
      - "**/*.mdx"
      - "**/*.txt"
      - ".gitignore"
      - ".gitattributes"
      - "LICENSE"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: "Skip running tests"
        required: false
        default: false
        type: boolean

defaults:
  run:
    working-directory: packages/server

env:
  NODE_VERSION: "20.x"
  PNPM_VERSION: "8.x"
  CI: true
  NODE_ENV: test

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm -r lint

      - name: Check formatting
        run: pnpm -r format:check

      - name: Check TypeScript types
        run: pnpm -r type-check

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: lint

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm -r build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist
          retention-days: 5

  godot-build:
    name: Godot Client Build
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v2
        with:
          version: "4.3.0"
          export-templates: true

      - name: Import Godot project
        run: |
          cd client/godot
          godot --headless --import

      - name: Build for Web
        run: |
          cd client/godot
          godot --headless --export-release "Web" builds/web/index.html

      - name: Upload Web build
        uses: actions/upload-artifact@v4
        with:
          name: godot-web-build
          path: client/godot/builds/web/
          retention-days: 30

      - name: Test Web build structure
        run: |
          cd client/godot/builds/web
          ls -la
          # Verify required files exist
          [ -f "index.html" ] || exit 1
          [ -f "index.js" ] || exit 1
          [ -f "index.wasm" ] || exit 1
          echo "Web build structure validated"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deployment placeholder
        run: echo "Deploying to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, godot-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deployment placeholder
        run: echo "Deploying to production environment..."

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, build, godot-build, deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Report Status
        run: |
          echo "Pipeline Status Update:"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Godot Build: ${{ needs.godot-build.result }}"
          echo "- Deploy Staging: ${{ needs.deploy-staging.result }}"
          echo "- Deploy Production: ${{ needs.deploy-production.result }}"

          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All critical checks passed"
          else
            echo "❌ A critical check failed"
          fi
