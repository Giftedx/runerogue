name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry run mode'
        required: false
        default: 'false'
        type: boolean
      build_docker:
        description: 'Build Docker image'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION_MIN: '3.8'
  NODE_VERSION: '18'
  DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
  BUILD_DOCKER: ${{ github.event.inputs.build_docker || 'false' }}

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          services/auth/package-lock.json
          client/meta-ui/package-lock.json
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
          
    - name: Install Python linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run Python linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check --diff .
        isort --check-only --diff .
        
    - name: Install Auth Service dependencies
      run: |
        cd services/auth
        npm ci
        
    - name: Lint Auth Service
      run: |
        cd services/auth
        npm run lint
        
    - name: Install Meta UI dependencies
      run: |
        cd client/meta-ui
        npm ci
        
    - name: Lint Meta UI
      run: |
        cd client/meta-ui
        npm run lint

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libatk1.0-0 libdrm2 libgtk-3-0 libgbm1
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        
    - name: Set up environment variables
      run: |
        echo "DEBUG=false" >> $GITHUB_ENV
        echo "DRY_RUN=${{ env.DRY_RUN }}" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "TIMEOUT=30" >> $GITHUB_ENV
        echo "CONFIG_FILE=config/config.yml" >> $GITHUB_ENV
        
    - name: Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test, test-auth-service, test-meta-ui]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
        
    - name: Set up environment variables
      run: |
        echo "DEBUG=false" >> $GITHUB_ENV
        echo "DRY_RUN=${{ env.DRY_RUN }}" >> $GITHUB_ENV
        echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
        echo "TIMEOUT=45" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        
    - name: Run integration tests
      run: |
        python -m pytest tests/ -v -k "integration" --tb=short || echo "No integration tests found"
        
    - name: Test Flask application
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from app import app
        from config import config
        print('Flask app test:')
        print(f'Config loaded: {config.all()}')
        with app.test_client() as client:
            response = client.get('/')
            print(f'Home endpoint status: {response.status_code}')
            response = client.get('/health')
            print(f'Health endpoint status: {response.status_code}')
        print('Flask app test completed successfully')
        "
        
    - name: Test multi-fallback scraping (dry run)
      run: |
        export DRY_RUN=true
        python -c "
        import sys
        sys.path.append('.')
        from scraper import WebScraper
        scraper = WebScraper()
        result = scraper.fetch('http://example.com')
        print(f'Scraper dry run test: {\"PASSED\" if result else \"FAILED\"}')
        print(f'Result length: {len(result) if result else 0}')
        "

  test-auth-service:
    name: Test Auth Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: runerogue_auth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: services/auth/package-lock.json
        
    - name: Install dependencies
      run: |
        cd services/auth
        npm ci
        
    - name: Set up test environment
      run: |
        cd services/auth
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/runerogue_auth_test" >> .env
        echo "JWT_SECRET=test-secret-key-for-ci" >> .env
        echo "NODE_ENV=test" >> .env
        
    - name: Build Auth Service
      run: |
        cd services/auth
        npm run build
        
    - name: Run Auth Service tests
      run: |
        cd services/auth
        npm test

  test-meta-ui:
    name: Test Meta UI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/meta-ui/package-lock.json
        
    - name: Install dependencies
      run: |
        cd client/meta-ui
        npm ci
        
    - name: Set up test environment
      run: |
        cd client/meta-ui
        cp .env.local.example .env.local
        
    - name: Run type checking
      run: |
        cd client/meta-ui
        npm run type-check
        
    - name: Build Meta UI
      run: |
        cd client/meta-ui
        npm run build
        
    - name: Run Meta UI tests
      run: |
        cd client/meta-ui
        npm test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Run safety check
      run: |
        safety check --json || echo "Safety check completed with warnings"
        
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ github.event.inputs.build_docker == 'true' || github.ref == 'refs/heads/main' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            libnss3 \
            libatk1.0-0 \
            libdrm2 \
            libgtk-3-0 \
            libgbm1 \
            && rm -rf /var/lib/apt/lists/*
        
        # Set working directory
        WORKDIR /app
        
        # Copy requirements and install dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Install Playwright browsers
        RUN playwright install chromium
        
        # Copy application code
        COPY . .
        
        # Create non-root user
        RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
        USER appuser
        
        # Set environment variables
        ENV PYTHONPATH=/app
        ENV FLASK_APP=app.py
        ENV FLASK_ENV=production
        
        # Expose port
        EXPOSE 5000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:5000/health || exit 1
        
        # Run application
        CMD ["python", "app.py"]
        EOF
        
    - name: Build Docker image
      run: |
        docker build -t runerogue:${{ github.sha }} .
        docker tag runerogue:${{ github.sha }} runerogue:latest
        
    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm -d --name test-container -p 5001:5000 \
          -e DRY_RUN=true \
          -e DEBUG=false \
          runerogue:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5001/health || exit 1
        
        # Stop container
        docker stop test-container
        
    - name: Save Docker image
      run: |
        docker save runerogue:latest | gzip > runerogue-image.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: runerogue-image.tar.gz
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, test-auth-service, test-meta-ui, integration-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deployment placeholder
      run: |
        echo "Deploying to staging environment..."
        echo "DRY_RUN mode: ${{ env.DRY_RUN }}"
        echo "This is where staging deployment would happen"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, test-auth-service, test-meta-ui, integration-test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deployment placeholder
      run: |
        echo "Deploying to production environment..."
        echo "DRY_RUN mode: ${{ env.DRY_RUN }}"
        echo "This is where production deployment would happen"

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, test-auth-service, test-meta-ui, integration-test, security-scan]
    if: always()
    
    steps:
    - name: Update status
      run: |
        echo "Pipeline Status Update:"
        echo "- Lint: ${{ needs.lint.result || 'skipped' }}"
        echo "- Test: ${{ needs.test.result || 'skipped' }}"
        echo "- Integration Test: ${{ needs.integration-test.result || 'skipped' }}"
        echo "- Security Scan: ${{ needs.security-scan.result || 'skipped' }}"
        echo "- Docker Build: ${{ needs.docker-build.result || 'skipped' }}"
        echo "DRY_RUN: ${{ env.DRY_RUN }}"
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "✅ All critical tests passed"
        else
          echo "❌ Some tests failed"
        fi