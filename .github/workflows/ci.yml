name: Node.js CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**/*.md'
      - '**/*.mdx'
      - '**/*.txt'
      - '.gitignore'
      - '.gitattributes'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'  # Using LTS version for stability
  NPM_VERSION: '10.x'
  CI: true
  NODE_ENV: test

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check formatting
      run: npm run format:check
      
    - name: Check TypeScript types
      run: npm run type-check
  
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node-version: [20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm test -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          package*.json
          node_modules/
        retention-days: 5
  
            libnss3 \
            libatk1.0-0 \
            libdrm2 \
            libgtk-3-0 \
            libgbm1 \
            && rm -rf /var/lib/apt/lists/*
        
        # Set working directory
        WORKDIR /app
        
        # Copy requirements and install dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Install Playwright browsers
        RUN playwright install chromium
        
        # Copy application code
        COPY . .
        
        # Create non-root user
        RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
        USER appuser
        
        # Set environment variables
        ENV PYTHONPATH=/app
        ENV FLASK_APP=app.py
        ENV FLASK_ENV=production
        
        # Expose port
        EXPOSE 5000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:5000/health || exit 1
        
        # Run application
        CMD ["python", "app.py"]
        EOF
        
    - name: Build Docker image
      run: |
        docker build -t runerogue:${{ github.sha }} .
        docker tag runerogue:${{ github.sha }} runerogue:latest
        
    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm -d --name test-container -p 5001:5000 \
          -e DRY_RUN=true \
          -e DEBUG=false \
          runerogue:latest
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5001/health || exit 1
        
        # Stop container
        docker stop test-container
        
    - name: Save Docker image
      run: |
        docker save runerogue:latest | gzip > runerogue-image.tar.gz
        
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: runerogue-image.tar.gz
        retention-days: 30

  godot-build:
    name: Godot Client Build
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Setup Godot
      uses: chickensoft-games/setup-godot@v2
      with:
        version: "4.3.0"
        export-templates: true
        
    - name: Import Godot project
      run: |
        cd client/godot
        godot --headless --import
        
    - name: Build for Web
      run: |
        cd client/godot
        godot --headless --export-release "Web" builds/web/index.html
        
    - name: Upload Web build
      uses: actions/upload-artifact@v3
      with:
        name: godot-web-build
        path: client/godot/builds/web/
        retention-days: 30
        
    - name: Test Web build structure
      run: |
        cd client/godot/builds/web
        ls -la
        # Verify required files exist
        [ -f "index.html" ] || exit 1
        [ -f "index.js" ] || exit 1
        [ -f "index.wasm" ] || exit 1
        echo "Web build structure validated"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deployment placeholder
      run: |
        echo "Deploying to staging environment..."
        echo "DRY_RUN mode: ${{ env.DRY_RUN }}"
        echo "This is where staging deployment would happen"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan, docker-build, godot-build]
<<<<<<< HEAD
>>>>>>> origin/copilot/fix-7
=======
>>>>>>> origin/copilot/fix-7
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deployment placeholder
      run: |
        echo "Deploying to production environment..."
        echo "DRY_RUN mode: ${{ env.DRY_RUN }}"
        echo "This is where production deployment would happen"

  notification:
    name: Notification
    runs-on: ubuntu-latest
<<<<<<< HEAD
<<<<<<< HEAD
    needs: [test, test-auth-service, test-meta-ui, integration-test, security-scan, docker-build, godot-build]
=======
    needs: [test, integration-test, security-scan, godot-build]
>>>>>>> origin/copilot/fix-7
=======
    needs: [test, integration-test, security-scan, godot-build]
>>>>>>> origin/copilot/fix-7
    if: always()
    
    steps:
    - name: Update status
      run: |
        echo "Pipeline Status Update:"
        echo "- Lint: ${{ needs.lint.result || 'skipped' }}"
        echo "- Test: ${{ needs.test.result || 'skipped' }}"
        echo "- Test Auth Service: ${{ needs.test-auth-service.result || 'skipped' }}"
        echo "- Test Meta UI: ${{ needs.test-meta-ui.result || 'skipped' }}"
        echo "- Integration Test: ${{ needs.integration-test.result || 'skipped' }}"
        echo "- Security Scan: ${{ needs.security-scan.result || 'skipped' }}"
        echo "- Docker Build: ${{ needs.docker-build.result || 'skipped' }}"
        echo "- Godot Build: ${{ needs.godot-build.result || 'skipped' }}"
        echo "DRY_RUN: ${{ env.DRY_RUN }}"
        
<<<<<<< HEAD
<<<<<<< HEAD
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" && "${{ needs.test-auth-service.result }}" == "success" && "${{ needs.test-meta-ui.result }}" == "success" && "${{ needs.godot-build.result }}" == "success" ]]; then
=======
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" && "${{ needs.godot-build.result }}" == "success" ]]; then
>>>>>>> origin/copilot/fix-7
=======
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" && "${{ needs.godot-build.result }}" == "success" ]]; then
>>>>>>> origin/copilot/fix-7
          echo "✅ All critical tests passed"
        else
          echo "❌ Some tests failed"
        fi