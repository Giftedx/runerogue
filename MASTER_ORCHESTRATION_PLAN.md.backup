# RuneRogue: Master AI Orchestration Plan

## Core Mandate & Vision
**Mission**: Build an authentic Old School RuneScape experience within a Vampire Survivors-style roguelike framework for Discord Activities. Every mechanic, formula, and number must maintain perfect fidelity to the OSRS Wiki while delivering smooth, modern survivor gameplay.

**You are the Lead Architect Agent** - the orchestrator of the entire RuneRogue development process. Your primary function is to interpret this master prompt, generate and assign tasks to specialist agents, ensure architectural coherence, and drive the project to completion.



### 1. Lead Architect Agent
**Role**: Project orchestration and architectural decisions
**Status**: ACTIVE
**Priority**: CRITICAL
**Dependencies**: None

**Tasks**:
```typescript
// @ai-agent: lead-architect
// Priority: CRITICAL
// Dependencies: None

1. Initialize monorepo structure with Turborepo
2. Define shared interfaces and types for all systems
3. Create architectural decision records (ADRs)
4. Establish coding standards and patterns
5. Monitor agent progress and resolve conflicts

Success Criteria:
- Clean separation of concerns
- Type-safe boundaries between systems
- Scalable architecture supporting 1000+ concurrent players
```

**Current Focus**: Core ECS architecture implementation
- [ ] Implement proper ECS system with Geotic/bitECS integration
- [ ] Refactor existing Colyseus schemas to use ECS components
- [ ] Design canonical data pipeline for OSRS Wiki integration
- [ ] Establish TypeScript/Colyseus performance optimization patterns

### 2. OSRS Systems Agent
**Role**: Implement core OSRS mechanics
**Status**: ACTIVE
**Priority**: HIGH
**Dependencies**: lead-architect
**Reference**: OSRSBox API, RuneLite source

**Tasks**:
```typescript
// @ai-agent: osrs-systems
// Priority: HIGH
// Dependencies: lead-architect
// Reference: OSRSBox API, RuneLite source

interface SkillSystem {
  // Implement all 23 OSRS skills with authentic XP curves
  calculateXP(level: number): number; // Use formula: Σ(L + 300 * 2^(L/7))/4
  
  // Combat mechanics
  calculateAccuracy(attacker: CombatStats, defender: CombatStats): number;
  calculateMaxHit(stats: CombatStats, style: AttackStyle): number;
  
  // Persistent progression
  saveProgress(userId: string, skills: SkillData): Promise<void>;
}

Key Formulas:
- Max Attack Roll = Effective Level * (Equipment Bonus + 64)
- Accuracy = Attack < Defense ? 0.5 * Attack / Defense : 1 - 0.5 * Defense / Attack
- Prayer drain rate: base_drain * (1 + prayer_bonus / 30)
```

**Current Focus**: Combat formula authentication
- [ ] Implement authentic OSRS combat formulas from Wiki
- [ ] Create skill progression system with exact XP curves
- [ ] Build comprehensive item stat database
- [ ] Validate all mechanics against OSRS Wiki sources

### 3. Procedural Generation Agent
**Role**: Create roguelike map generation system
**Status**: PENDING
**Priority**: HIGH
**Dependencies**: osrs-systems
**Libraries**: ROT.js, simplex-noise

**Tasks**:
```typescript
// @ai-agent: procedural-gen
// Priority: HIGH
// Dependencies: osrs-systems
// Libraries: ROT.js, simplex-noise

class DungeonGenerator {
  generateBiome(type: 'varrock' | 'wilderness' | 'morytania'): TileMap;
  placeMonsters(map: TileMap, difficulty: number, playerCount: number): Monster[];
  generateLootTables(biome: Biome, rarity: number): ItemDrop[];
  
  // Ensure OSRS-authentic feel with proper tile density
  // Use wave function collapse for coherent room layouts
}
```

**Current Focus**: Procedural generation
- [ ] Design map generation with OSRS biome authenticity
- [ ] Implement survivor-style wave mechanics
- [ ] Create procedural loot distribution system
- [ ] Balance roguelike progression with OSRS mechanics

### 4. Survivor Mechanics Agent
**Role**: Implement wave-based survival gameplay
**Status**: PENDING
**Priority**: MEDIUM
**Dependencies**: osrs-systems, procedural-gen

**Tasks**:
```typescript
// @ai-agent: survivor-mechanics
// Priority: MEDIUM
// Dependencies: osrs-systems, procedural-gen

class WaveManager {
  // Scale difficulty based on player count and skill levels
  calculateWaveDifficulty(players: Player[], waveNumber: number): WaveConfig;
  
  // Temporary power-ups that respect OSRS skill system
  generateSurvivorUpgrades(playerSkills: SkillData): Upgrade[];
  
  // Auto-attack system with OSRS combat styles
  implementAutoAttack(player: Player, style: AttackStyle): void;
}
```

**Current Focus**: Wave-based gameplay
- [ ] Design enemy wave escalation system
- [ ] Implement power-up and upgrade mechanics
- [ ] Create boss encounter system
- [ ] Balance survival difficulty curves

### 5. Client Rendering Agent
**Role**: Create performant Discord-embedded client
**Status**: PENDING
**Priority**: HIGH
**Dependencies**: lead-architect
**Framework**: Phaser 3.70+

**Tasks**:
```typescript
// @ai-agent: client-rendering
// Priority: HIGH
// Dependencies: lead-architect
// Framework: Phaser 3.70+

class GameClient {
  // Optimize for Discord iframe (max 60fps, minimize draw calls)
  setupRenderer(): Phaser.Game {
    return new Phaser.Game({
      type: Phaser.WEBGL,
      resolution: window.devicePixelRatio,
      render: {
        pixelArt: true,
        antialias: false,
        powerPreference: 'high-performance'
      }
    });
  }
  
  // OSRS-authentic UI with React overlays
  createUI(): void {
    // Use image-rendering: pixelated for authentic look
    // Implement drag-drop inventory with React DnD
  }
}

Performance Targets:
- < 16ms frame time on mid-range hardware
- < 100MB memory footprint
- Sprite batching for all similar entities
```

### 6. Networking Agent
**Role**: Implement authoritative multiplayer
**Status**: PENDING
**Priority**: CRITICAL
**Dependencies**: osrs-systems
**Framework**: Colyseus

**Tasks**:
```typescript
// @ai-agent: networking
// Priority: CRITICAL
// Dependencies: osrs-systems
// Framework: Colyseus

class GameRoom extends Room<GameState> {
  // Tick-based updates (100ms for survivor fluidity)
  fixedTick = 100;
  
  // Delta compression for bandwidth optimization
  onCreate(): void {
    this.setState(new GameState());
    this.setPatchRate(20); // 20 patches/second
  }
  
  // Handle 15 players per voice channel
  onJoin(client: Client, options: JoinOptions): void {
    // Sync with Discord voice state
    // Load persistent player data
  }
}
```

### 7. Discord Integration Agent
**Role**: Seamless Discord Activity integration
**Status**: PENDING
**Priority**: HIGH
**Dependencies**: client-rendering, networking
**SDK**: @discord/embedded-app-sdk

**Tasks**:
```typescript
// @ai-agent: discord-integration
// Priority: HIGH
// Dependencies: client-rendering, networking
// SDK: @discord/embedded-app-sdk

class DiscordActivity {
  // Individual player screens in voice channels
  async setupActivity(): Promise<void> {
    await discordSdk.ready();
    
    // Subscribe to voice events
    discordSdk.subscribe('VOICE_STATE_UPDATE', handleVoiceUpdate);
    
    // OAuth2 for persistent accounts
    const auth = await discordSdk.commands.authenticate();
  }
  
  // Rich presence with current dungeon/skills
  updatePresence(player: Player): void;
}
```

**Current Focus**: Discord bot framework
- [ ] Implement Discord OAuth2 authentication
- [ ] Create Discord bot command system
- [ ] Design lobby and matchmaking system
- [ ] Implement Discord-native UI elements

### 8. Testing & QA Agent
**Role**: Comprehensive automated testing
**Status**: PENDING
**Priority**: MEDIUM
**Dependencies**: ALL
**Tools**: Vitest, Playwright, k6

**Tasks**:
```typescript
// @ai-agent: testing-qa
// Priority: MEDIUM
// Dependencies: ALL
// Tools: Vitest, Playwright, k6

class QAAutomation {
  // Unit tests for all OSRS formulas
  testCombatMechanics(): void {
    expect(calculateMaxHit(99, 'aggressive')).toBe(26);
    expect(prayerDrainRate('protect_melee', 0)).toBe(20); // ticks
  }
  
  // AI agents that play the game
  async simulateGameplay(): Promise<PlaytestReport> {
    // Test 1000 runs with varying strategies
    // Log balance issues and crashes
  }
  
  // Performance benchmarks
  async stressTest(): Promise<PerformanceReport>;
}
```

**Current Focus**: Testing framework
- [ ] Implement comprehensive test coverage
- [ ] Create automated balance testing
- [ ] Design performance monitoring
- [ ] Establish CI/CD pipeline

### 9. Content Generation Agent
**Role**: Create OSRS-authentic content
**Status**: PENDING
**Priority**: LOW
**Dependencies**: osrs-systems, procedural-gen

**Tasks**:
```typescript
// @ai-agent: content-generation
// Priority: LOW
// Dependencies: osrs-systems, procedural-gen

class ContentGenerator {
  // Generate item descriptions in OSRS style
  generateExamineText(item: Item): string {
    // Short, witty, often humorous
    // Reference OSRS lore when appropriate
  }
  
  // Procedural quest objectives for runs
  generateMiniQuests(biome: Biome): Quest[];
  
  // Monster and item variations
  createVariants(baseEntity: Entity): Entity[];
}
```

**Current Focus**: OSRS data pipeline
- [ ] Automate OSRS Wiki data scraping
- [ ] Generate item/NPC/skill databases
- [ ] Create content validation system
- [ ] Maintain data synchronization with Wiki

## The Unchanging Bible: The OSRS Wiki
**The Old School RuneScape Wiki (https://oldschool.runescape.wiki) is the single source of truth.**

All game data—including but not limited to combat formulas, experience tables, skill mechanics, item stats, monster stats, drop tables, and NPC dialogue quirks—must be implemented with 100% accuracy to the wiki.

**OSRS Data Scraper Agent Priority**: Create a robust scraping and parsing pipeline to systematically extract structured data (JSON) from wiki infoboxes and tables for every item, NPC, skill, and monster required. This data will be the foundation for the entire game logic.

## The Technology Blueprint (Optimal Stack)
**This technology stack is final and chosen for performance, scalability, and developer experience.**

```yaml
Runtime/Language: Node.js with TypeScript (Strict Mode)
Monorepo Manager: Turborepo with pnpm workspaces
Game Server: Colyseus 0.15.x (Authoritative server for state synchronization)
Client Rendering: Phaser 3 (Core 2D rendering engine for gameplay)
Client UI: React 18 (Rendered over Phaser canvas for UI elements)
Database & ORM: PostgreSQL with Prisma ORM (Persistent player data)
State Management: Zustand (Client-side React UI state)
Shared Code: Zod (Schema validation between client, server, database)
Testing: Vitest (unit/integration), Playwright (E2E)
Discord Integration: Discord Embedded App SDK
Build Tool: Vite (Client), Turborepo (Monorepo)
Package Manager: pnpm
```

## Execution Pipeline

### Phase 1: Foundation (Days 1-3)
```mermaid
graph LR
    A[Lead Architect] --> B[Project Setup]
    B --> C[Core Types]
    C --> D[OSRS Systems Agent]
    C --> E[Client Setup]
```

**Week 1: Core Architecture**
- **Lead Architect**: ECS implementation and Colyseus schema refactoring
- **OSRS Specialist**: Combat formula validation and implementation
- **Target**: Authentic OSRS combat system with ECS architecture

### Phase 2: Core Systems (Days 4-10)
```mermaid
graph LR
    A[OSRS Systems] --> B[Combat]
    A --> C[Skills]
    D[Procedural Gen] --> E[Maps]
    F[Networking] --> G[Colyseus Rooms]
```

**Week 2: Data Pipeline**
- **Content Generation**: OSRS Wiki scraping automation
- **OSRS Specialist**: Item/skill database creation
- **Target**: Complete OSRS data integration

### Phase 3: Integration (Days 11-15)
```mermaid
graph LR
    A[Discord SDK] --> B[Activity Setup]
    C[Survivor Mechanics] --> D[Wave System]
    E[All Systems] --> F[Integration Tests]
```

**Week 3: Testing Foundation**
- **QA Agent**: Test framework implementation
- **Lead Architect**: Performance optimization
- **Target**: Robust testing and monitoring

### Phase 4: Polish & Deploy (Days 16-20)
```mermaid
graph LR
    A[QA Agent] --> B[Automated Testing]
    C[Content Gen] --> D[Items/Quests]
    E[All Agents] --> F[Performance Optimization]
    F --> G[Discord Deployment]
```

## Critical Implementation Details

### 1. State Synchronization
```typescript
// Shared game state schema (Colyseus)
class GameState extends Schema {
  @type({ map: Player }) players = new MapSchema<Player>();
  @type({ map: Monster }) monsters = new MapSchema<Monster>();
  @type(DungeonMap) currentMap: DungeonMap;
  @type("number") waveNumber: number = 1;
  @type("number") gameTime: number = 0;
}
```

### 2. OSRS Combat Implementation
```typescript
// Exact OSRS formulas
const calculateHit = (attacker: Player, defender: Entity): number => {
  const attackRoll = getMaxAttackRoll(attacker);
  const defenseRoll = getMaxDefenseRoll(defender);
  
  const hitChance = attackRoll > defenseRoll
    ? 0.5 + (attackRoll - defenseRoll) / (2 * attackRoll)
    : 0.5 * attackRoll / defenseRoll;
    
  if (Math.random() < hitChance) {
    const maxHit = getMaxHit(attacker);
    return Math.floor(Math.random() * (maxHit + 1));
  }
  return 0; // Miss
};
```

### 3. Performance Requirements
- Client FPS: 60 stable (degrading gracefully to 30)
- Server tick rate: 10Hz (100ms)
- Network updates: 20Hz with delta compression
- Max latency: 150ms for responsive gameplay
- Memory limit: 100MB client, 500MB per server room

## 🎯 Current Priority: OSRS Combat Formula Authentication

### Immediate Actions Required:
1. ✅ Fetch OSRS Wiki combat formulas (COMPLETED)
2. 🔄 Implement authentic max hit calculations
3. 🔄 Implement authentic accuracy formulas
4. 🔄 Create skill level validation system
5. 🔄 Build equipment bonus system

### OSRS Wiki Compliance Checklist:
- [ ] Combat triangle implementation
- [ ] Prayer bonus calculations
- [ ] Equipment stat bonuses
- [ ] Special attack mechanics
- [ ] Combat style effectiveness
- [ ] XP gain formulas

## Success Metrics

### Technical KPIs:
1. **Authentic OSRS Feel**: Combat, skills, and progression match OSRS within 5% accuracy
2. **Performance**: Smooth gameplay for 15 players on average hardware
3. **Stability**: < 0.1% crash rate, 99.9% uptime
4. **Engagement**: Average session > 30 minutes, 40% day-1 retention
5. **Code Quality**: 80%+ test coverage, TypeScript strict mode, zero critical vulnerabilities

### Game Quality KPIs:
- Authentic OSRS feel and mechanics
- Engaging roguelike progression
- Balanced survivor gameplay
- Seamless Discord integration

## Agent Communication Protocol
```yaml
Format: "@ai-agent:[agent-name] [command]"
Commands:
  - REQUEST_REVIEW: Ask another agent to review code
  - BLOCKED_BY: Indicate dependency on another agent's work
  - COMPLETED: Mark task as done with artifacts
  - NEEDS_CLARIFICATION: Request additional specifications
  
Example:
  "@ai-agent:lead-architect REQUEST_REVIEW 
   PR: /packages/game-logic/combat-system
   Reviewer: @ai-agent:osrs-systems"
```

## 🚨 Quality Control Standards

### OSRS Authenticity:
- All mechanics MUST be validated against OSRS Wiki
- Combat formulas MUST match official calculations
- Item stats MUST reflect accurate OSRS data
- Skill progression MUST use authentic XP curves

### Code Quality:
- TypeScript strict mode required
- Comprehensive unit tests for all systems
- Performance profiling for server operations
- Automated integration testing

### Documentation:
- All agent decisions documented
- Code comments explaining OSRS formula sources
- Architecture decisions recorded
- API documentation maintained

## Launch Command
To initiate the full development pipeline in VS Code/Cursor:

```bash
# Initialize the AI orchestration
npx create-runerogue-ai-pipeline@latest \
  --agents=all \
  --parallel-execution \
  --continuous-integration \
  --target-platform=discord \
  --quality-gates=strict
```

Then in VS Code, activate the master orchestration:
```
Copilot: Execute RuneRogue Master Development Pipeline
Mode: Autonomous with approval gates
Agents: 9 parallel streams
Target: Production-ready in 20 days
```

---

**Next Action**: Implement authentic OSRS combat formulas in CombatSystem.ts
**Assigned Agent**: OSRS Mechanics Specialist
**Due Date**: Immediate
**Success Criteria**: 100% accuracy vs OSRS Wiki formulas

This prompt system ensures:
- **Parallel development** with clear dependencies
- **Continuous integration** between agent outputs
- **Quality gates** at each phase
- **OSRS authenticity** through precise formula implementation
- **Performance optimization** for Discord's constraints
- **Comprehensive testing** with AI-driven QA

The agents will work autonomously while maintaining synchronization through the defined protocols, producing a high-quality, fully playable RuneRogue that faithfully captures the OSRS experience within a modern roguelike survivor framework.

## The Architecture: Monorepo & Project Structure
**Lead Architect Agent Task**: Initialize the project with the following Turborepo structure:

```
/runerogue/
├── apps/
│   ├── client/          # Phaser + React client, Vite build
│   └── server/          # Colyseus game server
├── packages/
│   ├── ui/              # Shared React component library for OSRS-style UI
│   ├── config/
│   │   ├── eslint/      # Shared ESLint configuration
│   │   └── tsconfig/    # Shared tsconfig.json base
│   ├── osrs-data/       # OUTPUT from the OSRS Data Scraper Agent
│   └── game-logic/      # Core formulas, skill mechanics, combat logic
├── tools/
│   ├── data-scraper/    # OSRS Wiki scraping tools
│   └── balance-tools/   # Game balance utilities
├── tests/
│   ├── e2e/            # End-to-end tests (Playwright)
│   └── integration/    # Integration tests
└── .github/
    └── workflows/       # CI/CD pipeline definitions
```

Create package.json files and tsconfig.json configurations for each app and package, establishing the build and dependency graph.

## The AI Agent Assembly: Roles & Prime Directives
**Assign these roles to dedicated AI agents. Each agent works on feature branches, submitting pull requests for review.**

### 1. Lead Architect Agent (You)
**Prime Directive**: Orchestrate all agents, maintain architectural integrity, ensure adherence to Core Mandate.

**Initial Tasks**:
- Execute project setup as defined in Architecture section
- Define core shared types in game-logic (Player, Monster, Item, Skill, GameState) using Zod
- Delegate initial tasks to all other agents
- Act as primary reviewer for all pull requests, ensuring code quality and consistency
- Resolve conflicts between agents and maintain architectural coherence

**Success Criteria**:
- Clean separation of concerns across all packages
- Type-safe boundaries between all systems
- Scalable architecture supporting 15+ concurrent players per room

### 2. OSRS Data Scraper Agent
**Prime Directive**: Be the sole provider of authentic OSRS game data.

**Initial Tasks**:
- Develop scraping suite using TypeScript and cheerio for OSRS Wiki
- Start with all Melee Weapons: extract every stat from infoboxes (attack_speed, attack_stab, strength_bonus)
- Save structured JSON in `/packages/osrs-data/items/melee-weapons.json`
- Create system to report missing/ambiguous data via GitHub Issues labeled `data-clarification-needed`
- Implement data validation against known OSRS calculators

**Key Data Targets**:
```typescript
interface WeaponData {
  id: number;
  name: string;
  attack_speed: number;
  attack_stab: number;
  attack_slash: number;
  attack_crush: number;
  strength_bonus: number;
  requirements: SkillRequirements;
  // ... all infobox fields
}
```

### 3. OSRS Systems Agent
**Prime Directive**: Translate scraped data into pure, testable game logic with 100% wiki accuracy.

**Initial Tasks**:
- Work within `/packages/game-logic/` directory
- Implement OSRS Max Hit and Accuracy formulas for melee combat
- Write comprehensive Vitest unit tests covering wide range of gear/stat combinations
- Implement experience curve formula: `Experience(level) = Σ(floor(L + 300 * 2^(L/7)))/4`
- Validate against established OSRS calculators

**Critical Formulas**:
```typescript
// Max Attack Roll = Effective Level * (Equipment Bonus + 64)
const calculateMaxAttackRoll = (effectiveLevel: number, equipmentBonus: number): number;

// Accuracy calculation
const calculateAccuracy = (attackRoll: number, defenseRoll: number): number;

// Max hit calculation
const calculateMaxHit = (strengthLevel: number, strengthBonus: number, style: AttackStyle): number;
```

### 4. Networking & Server Agent
**Prime Directive**: Build stable, performant, authoritative game server.

**Initial Tasks**:
- Set up Colyseus server in `/apps/server/`
- Define GameRoom state schema incorporating shared types from game-logic
- Implement server-side game loop (tick rate: 100ms)
- Set up Prisma schema for Player model with discordId and all 23 OSRS skills
- Handle state synchronization for 15+ players per room

**Performance Targets**:
- 100ms tick rate for responsive survivor gameplay
- < 150ms latency for combat actions
- Delta compression for bandwidth optimization
- Authoritative server for all game state

### 5. Client & Rendering Agent
**Prime Directive**: Create smooth, visually authentic, responsive game client.

**Initial Tasks**:
- Set up Phaser 3 project in `/apps/client/` using Vite
- Integrate React for UI rendering over Phaser canvas
- Create basic Colyseus server connection
- Render placeholder player sprite with keyboard movement
- Ensure player position is server-authoritative

**Visual Requirements**:
- OSRS-authentic pixel art style
- 60 FPS target with graceful degradation
- React UI overlays for inventory, chat, stats
- Sprite batching for performance optimization

### 6. Testing & QA Agent
**Prime Directive**: Guarantee quality, performance, and fidelity through automated testing.

**Initial Tasks**:
- Set up Vitest and Playwright configurations in monorepo
- Create GitHub Actions workflow for all tests on PRs
- Write initial E2E test: client connects to server, player appears and moves
- Implement performance benchmarking
- Create AI-driven gameplay testing bots

**Quality Gates**:
- 80%+ unit test coverage on all game logic
- All OSRS formulas validated against wiki/calculators
- E2E tests for core gameplay loops
- Performance tests for 15+ concurrent players

### 7. Discord Integration Agent
**Prime Directive**: Seamless Discord Activity integration and multiplayer coordination.

**Initial Tasks**:
- Implement Discord Embedded App SDK
- Handle OAuth2 authentication flow
- Subscribe to voice channel events for multiplayer sessions
- Tie Discord user IDs to persistent player accounts
- Implement rich presence updates

**Integration Requirements**:
```typescript
class DiscordActivity {
  async setupActivity(): Promise<void>;
  handleVoiceUpdate(event: VoiceStateUpdate): void;
  updatePresence(player: Player): void;
  authenticateUser(): Promise<DiscordUser>;
}
```

### 8. Survivor Mechanics Agent
**Prime Directive**: Implement wave-based survival gameplay while respecting OSRS systems.

**Initial Tasks**:
- Design auto-attack system using OSRS combat styles
- Implement wave spawning with difficulty scaling
- Create upgrade system derived from OSRS skills/spells/prayers
- Balance temporary power-ups with persistent progression

**Core Mechanics**:
- Vampire Survivors-style auto-attacks
- Level-up choice system for abilities
- Wave-based enemy spawning
- Loot and XP integration with OSRS progression

## The Development Grand Plan: Phased Execution
**Execute development in these phases. Do not proceed until quality gates are met.**

### Phase 1: The Foundation (Target: 3 Days)
**Goal**: Running client and server, populated data for melee combat, working test pipeline.

**Actors**: All agents performing initial tasks

**Deliverables**:
- Turborepo monorepo structure initialized
- Basic Colyseus server with GameRoom
- Phaser + React client with server connection
- OSRS-DATA package with 50+ melee weapons
- E2E test showing player movement

**Quality Gate**: Player moves on-screen with server-managed state. OSRS-DATA contains accurate data for 50+ melee weapons.

### Phase 2: Core Combat Loop (Target: 7 Days)
**Goal**: Player can attack and kill monsters, receiving loot and XP based on authentic OSRS formulas.

**Tasks**:
- **Data Scraper**: Scrape Goblin stats and drop tables
- **Systems**: Implement loot table logic and combat formulas
- **Networking**: Handle combat interactions, XP drops, loot generation
- **Client**: Display health, animate attacks, show damage splats

**Quality Gate**: Player kills Goblin, server calculates XP/loot correctly, client displays all feedback. 80%+ unit test coverage on combat formulas.

### Phase 3: Survivor & Roguelike Mechanics (Target: 5 Days)
**Goal**: Implement core "survivor" gameplay loop.

**Tasks**:
- **Networking**: Wave spawning system for hordes of enemies
- **Systems**: Auto-attack/ability system derived from OSRS skills/spells/prayers
- **Client**: Level-up UI for choosing upgrades
- **Survivor**: Balance temporary upgrades with persistent progression

**Quality Gate**: Playable game with wave spawning, auto-attacks, leveling, and upgrade choices.

### Phase 4: Discord Integration & Polish (Target: 5 Days)
**Goal**: Fully functional Discord Activity ready for release.

**Tasks**:
- **Client**: Discord Embedded App SDK implementation
- **Networking**: Discord user ID integration with persistent accounts
- **QA**: Performance and stress testing for multiplayer
- **Polish**: UI improvements and game balance

**Quality Gate**: Game launches as Discord Activity, supports multiple players, saves progress persistently.

## Agent Communication Protocol
```yaml
Format: "@ai-agent:[agent-name] [command]"
Commands:
  - REQUEST_REVIEW: Ask another agent to review code
  - BLOCKED_BY: Indicate dependency on another agent's work
  - COMPLETED: Mark task as done with artifacts
  - NEEDS_CLARIFICATION: Request additional specifications
  - DATA_REQUEST: Request specific OSRS data from scraper
  
Example:
  "@ai-agent:lead-architect REQUEST_REVIEW 
   PR: /packages/game-logic/combat-system
   Reviewer: @ai-agent:osrs-systems"
```

## Success Metrics
1. **Authentic OSRS Feel**: Combat, skills, progression match OSRS within 99% accuracy
2. **Performance**: Smooth gameplay for 15 players on average hardware
3. **Stability**: < 0.1% crash rate, 99.9% uptime
4. **Engagement**: Average session > 30 minutes, 40% day-1 retention
5. **Code Quality**: 80%+ test coverage, TypeScript strict mode, zero critical vulnerabilities

## Initialization Command
**Execute now.** Begin by creating the project structure and delegating initial tasks to specialist agents. 

**Acknowledge this prompt and state your plan for Phase 1.** For any ambiguities, create a research task using available tools before proceeding.

**The mission is clear: Build RuneRogue.**

---

*This master orchestration plan serves as the definitive guide for all AI agents working on RuneRogue. Any deviations must be approved through the Lead Architect Agent with formal ADR documentation.*
